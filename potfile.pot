# Translations template for PROJECT.
# Copyright (C) 2018 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2018-09-04 11:02+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#. name
#: course.yaml
msgid "[LSINF1101-PYTHON] Introduction à la programmation"
msgstr ""

#: AmazonConstructor/run:67 AmazonPay/run:67 Average/run:67 Bath/run:67
#: DebtReminder/run:67 DeepConcat/run:67 DestroyAllEnnemies/run:67
#: DestroyAnEnnemy/run:67 DiffCount/run:67 DoubleLink/run:67 DummyScript/run:66
#: Factorial/run:67 Fibonacci/run:67 FirstSum/run:67 FizzBuzz/run:67
#: Flatten/run:67 GCD/run:67 GD/run:67 GUI/run:67 Hello/run:67 HighOrder/run:67
#: Hogwarts-I/run:67 Hogwarts-II/run:67 Hogwarts-III/run:67 Hogwarts-IV/run:67
#: Hogwarts-V/run:67 Interests/run:67 Interval/run:67 LinkedList/run:67
#: LinkedListChildren/run:67 LoadSaveGame/run:67 Max/run:67 Median/run:67
#: Memoization/run:67 MergeList/run:67 Min/run:67 Morse/run:67
#: PatternExtraction-I/run:67 PatternExtraction-II/run:67
#: PatternExtraction-III/run:67 Polynomial/run:67 Primes/run:67 Quetelet/run:67
#: RecursiveFactorial/run:67 RecursiveFibonacci/run:67 RecursiveSum/run:67
#: Remainder/run:67 Sort/run:67 SpeedingFine/run:67 StudentConstructor/run:67
#: Sum/run:67 Translator/run:67 WrongIterations/run:67 ZooGame/run:67
#: dummy_run:66 run:67
msgid ""
"Your program does not compile: \n"
" "
msgstr ""

#: DummyScript/run:79 dummy_run:79
#, python-format
msgid ""
"Your program prints:\n"
"\n"
"%s\n"
msgstr ""

#: AmazonConstructor/run:78 AmazonConstructor/run:90 AmazonPay/run:78
#: AmazonPay/run:90 Average/run:78 Average/run:90 Bath/run:78 Bath/run:90
#: DebtReminder/run:78 DebtReminder/run:90 DeepConcat/run:78 DeepConcat/run:90
#: DestroyAllEnnemies/run:78 DestroyAllEnnemies/run:90 DestroyAnEnnemy/run:78
#: DestroyAnEnnemy/run:90 DiffCount/run:78 DiffCount/run:90 DoubleLink/run:78
#: DoubleLink/run:90 Factorial/run:78 Factorial/run:90 Fibonacci/run:78
#: Fibonacci/run:90 FirstSum/run:78 FirstSum/run:90 FizzBuzz/run:78
#: FizzBuzz/run:90 Flatten/run:78 Flatten/run:90 GCD/run:78 GCD/run:90
#: GD/run:78 GD/run:90 GUI/run:78 GUI/run:90 Hello/run:78 Hello/run:90
#: HighOrder/run:78 HighOrder/run:90 Hogwarts-I/run:78 Hogwarts-I/run:90
#: Hogwarts-II/run:78 Hogwarts-II/run:90 Hogwarts-III/run:78
#: Hogwarts-III/run:90 Hogwarts-IV/run:78 Hogwarts-IV/run:90 Hogwarts-V/run:78
#: Hogwarts-V/run:90 Interests/run:78 Interests/run:90 Interval/run:78
#: Interval/run:90 LinkedList/run:78 LinkedList/run:90
#: LinkedListChildren/run:78 LinkedListChildren/run:90 LoadSaveGame/run:78
#: LoadSaveGame/run:90 Max/run:78 Max/run:90 Median/run:78 Median/run:90
#: Memoization/run:78 Memoization/run:90 MergeList/run:78 MergeList/run:90
#: Min/run:78 Min/run:90 Morse/run:78 Morse/run:90 PatternExtraction-I/run:78
#: PatternExtraction-I/run:90 PatternExtraction-II/run:78
#: PatternExtraction-II/run:90 PatternExtraction-III/run:78
#: PatternExtraction-III/run:90 Polynomial/run:78 Polynomial/run:90
#: Primes/run:78 Primes/run:90 Quetelet/run:78 Quetelet/run:90
#: RecursiveFactorial/run:78 RecursiveFactorial/run:90
#: RecursiveFibonacci/run:78 RecursiveFibonacci/run:90 RecursiveSum/run:78
#: RecursiveSum/run:90 Remainder/run:78 Remainder/run:90 Sort/run:78
#: Sort/run:90 SpeedingFine/run:78 SpeedingFine/run:90
#: StudentConstructor/run:78 StudentConstructor/run:90 Sum/run:78 Sum/run:90
#: Translator/run:78 Translator/run:90 WrongIterations/run:78
#: WrongIterations/run:90 ZooGame/run:78 ZooGame/run:90 run:78 run:90
msgid ""
"The program does not compile for external reasons,please contact an "
"administrator asap: \n"
" "
msgstr ""

#: AmazonConstructor/run:104 AmazonPay/run:104 Average/run:104 Bath/run:104
#: DebtReminder/run:104 DeepConcat/run:104 DestroyAllEnnemies/run:104
#: DestroyAnEnnemy/run:104 DiffCount/run:104 DoubleLink/run:104
#: Factorial/run:104 Fibonacci/run:104 FirstSum/run:104 FizzBuzz/run:104
#: Flatten/run:104 GCD/run:104 GD/run:104 GUI/run:104 Hello/run:104
#: HighOrder/run:104 Hogwarts-I/run:104 Hogwarts-II/run:104
#: Hogwarts-III/run:104 Hogwarts-IV/run:104 Hogwarts-V/run:104
#: Interests/run:104 Interval/run:104 LinkedList/run:104
#: LinkedListChildren/run:104 LoadSaveGame/run:104 Max/run:104 Median/run:104
#: Memoization/run:104 MergeList/run:104 Min/run:104 Morse/run:104
#: PatternExtraction-I/run:104 PatternExtraction-II/run:104
#: PatternExtraction-III/run:104 Polynomial/run:104 Primes/run:104
#: Quetelet/run:104 RecursiveFactorial/run:104 RecursiveFibonacci/run:104
#: RecursiveSum/run:104 Remainder/run:104 Sort/run:104 SpeedingFine/run:104
#: StudentConstructor/run:104 Sum/run:104 Translator/run:104
#: WrongIterations/run:104 ZooGame/run:104 run:104
msgid "Failed test:\n"
msgstr ""

#: AmazonConstructor/run:143 AmazonPay/run:143 Average/run:143 Bath/run:143
#: DebtReminder/run:143 DeepConcat/run:143 DestroyAllEnnemies/run:143
#: DestroyAnEnnemy/run:143 DiffCount/run:143 DoubleLink/run:143
#: Factorial/run:143 Fibonacci/run:143 FirstSum/run:143 FizzBuzz/run:143
#: Flatten/run:143 GCD/run:143 GD/run:143 GUI/run:143 Hello/run:143
#: HighOrder/run:143 Hogwarts-I/run:143 Hogwarts-II/run:143
#: Hogwarts-III/run:143 Hogwarts-IV/run:143 Hogwarts-V/run:143
#: Interests/run:143 Interval/run:143 LinkedList/run:143
#: LinkedListChildren/run:143 LoadSaveGame/run:143 Max/run:143 Median/run:143
#: Memoization/run:143 MergeList/run:143 Min/run:143 Morse/run:143
#: PatternExtraction-I/run:143 PatternExtraction-II/run:143
#: PatternExtraction-III/run:143 Polynomial/run:143 Primes/run:143
#: Quetelet/run:143 RecursiveFactorial/run:143 RecursiveFibonacci/run:143
#: RecursiveSum/run:143 Remainder/run:143 Sort/run:143 SpeedingFine/run:143
#: StudentConstructor/run:143 Sum/run:143 Translator/run:143
#: WrongIterations/run:143 ZooGame/run:143 run:143
msgid ""
"It seems that you have made mistakes in your code…\n"
"\n"
msgstr ""

#: AmazonConstructor/run:156 AmazonConstructor/run:160 AmazonPay/run:156
#: AmazonPay/run:160 Average/run:156 Average/run:160 Bath/run:156 Bath/run:160
#: DebtReminder/run:156 DebtReminder/run:160 DeepConcat/run:156
#: DeepConcat/run:160 DestroyAllEnnemies/run:156 DestroyAllEnnemies/run:160
#: DestroyAnEnnemy/run:156 DestroyAnEnnemy/run:160 DiffCount/run:156
#: DiffCount/run:160 DoubleLink/run:156 DoubleLink/run:160 Factorial/run:156
#: Factorial/run:160 Fibonacci/run:156 Fibonacci/run:160 FirstSum/run:156
#: FirstSum/run:160 FizzBuzz/run:156 FizzBuzz/run:160 Flatten/run:156
#: Flatten/run:160 GCD/run:156 GCD/run:160 GD/run:156 GD/run:160 GUI/run:156
#: GUI/run:160 Hello/run:156 Hello/run:160 HighOrder/run:156 HighOrder/run:160
#: Hogwarts-I/run:156 Hogwarts-I/run:160 Hogwarts-II/run:156
#: Hogwarts-II/run:160 Hogwarts-III/run:156 Hogwarts-III/run:160
#: Hogwarts-IV/run:156 Hogwarts-IV/run:160 Hogwarts-V/run:156
#: Hogwarts-V/run:160 Interests/run:156 Interests/run:160 Interval/run:156
#: Interval/run:160 LinkedList/run:156 LinkedList/run:160
#: LinkedListChildren/run:156 LinkedListChildren/run:160 LoadSaveGame/run:156
#: LoadSaveGame/run:160 Max/run:156 Max/run:160 Median/run:156 Median/run:160
#: Memoization/run:156 Memoization/run:160 MergeList/run:156 MergeList/run:160
#: Min/run:156 Min/run:160 Morse/run:156 Morse/run:160
#: PatternExtraction-I/run:156 PatternExtraction-I/run:160
#: PatternExtraction-II/run:156 PatternExtraction-II/run:160
#: PatternExtraction-III/run:156 PatternExtraction-III/run:160
#: Polynomial/run:156 Polynomial/run:160 Primes/run:156 Primes/run:160
#: Quetelet/run:156 Quetelet/run:160 RecursiveFactorial/run:156
#: RecursiveFactorial/run:160 RecursiveFibonacci/run:156
#: RecursiveFibonacci/run:160 RecursiveSum/run:156 RecursiveSum/run:160
#: Remainder/run:156 Remainder/run:160 Sort/run:156 Sort/run:160
#: SpeedingFine/run:156 SpeedingFine/run:160 StudentConstructor/run:156
#: StudentConstructor/run:160 Sum/run:156 Sum/run:160 Translator/run:156
#: Translator/run:160 WrongIterations/run:156 WrongIterations/run:160
#: ZooGame/run:156 ZooGame/run:160 run:156 run:160
msgid ""
"You have made mistakes: \n"
"\n"
msgstr ""

#: AmazonConstructor/run:163 AmazonPay/run:163 Average/run:163 Bath/run:163
#: DebtReminder/run:163 DeepConcat/run:163 DestroyAllEnnemies/run:163
#: DestroyAnEnnemy/run:163 DiffCount/run:163 DoubleLink/run:163
#: Factorial/run:163 Fibonacci/run:163 FirstSum/run:163 FizzBuzz/run:163
#: Flatten/run:163 GCD/run:163 GD/run:163 GUI/run:163 Hello/run:163
#: HighOrder/run:163 Hogwarts-I/run:163 Hogwarts-II/run:163
#: Hogwarts-III/run:163 Hogwarts-IV/run:163 Hogwarts-V/run:163
#: Interests/run:163 Interval/run:163 LinkedList/run:163
#: LinkedListChildren/run:163 LoadSaveGame/run:163 Max/run:163 Median/run:163
#: Memoization/run:163 MergeList/run:163 Min/run:163 Morse/run:163
#: PatternExtraction-I/run:163 PatternExtraction-II/run:163
#: PatternExtraction-III/run:163 Polynomial/run:163 Primes/run:163
#: Quetelet/run:163 RecursiveFactorial/run:163 RecursiveFibonacci/run:163
#: RecursiveSum/run:163 Remainder/run:163 Sort/run:163 SpeedingFine/run:163
#: StudentConstructor/run:163 Sum/run:163 Translator/run:163
#: WrongIterations/run:163 ZooGame/run:163 run:163
msgid "You answered well this question"
msgstr ""

#. author
#: AmazonConstructor/task.yaml AmazonPay/task.yaml DestroyAllEnnemies/task.yaml
#: DestroyAnEnnemy/task.yaml LinkedListChildren/task.yaml
#: LoadSaveGame/task.yaml
msgid "Damien Gonze"
msgstr ""

#. context
#: AmazonConstructor/task.yaml
msgid ""
"As the new manager of an Amazon dispatch center, you have to create a "
"class to represent the commands.\n"
"\n"
"A command have the following attributes :\n"
"\n"
"* the id of the buyer\n"
"\n"
"* the id of the item\n"
"\n"
"* the quantity of the item\n"
"\n"
"* the price of the item\n"
"\n"
"And must have the following methods :\n"
"\n"
"* ``get_price()`` : return the total price of the command\n"
"\n"
"* ``__str__()`` : return the command on the format : id_buyer, id_item : "
"price * quantity = (price*quantity)\n"
"\n"
"*Example* : \"12, 32 : 5 * 20 = 100\"\n"
"\n"
"There must also be class methods :\n"
"\n"
"* ``get_number_total_commad()`` : return the total number of commands "
"made\n"
"\n"
"* ``get_total_price()`` : return the total price of all the commands\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: AmazonConstructor/task.yaml
msgid "Session 9: Amazon dispatch center"
msgstr ""

#. name, q1, name
#: AmazonConstructor/task.yaml AmazonPay/task.yaml Average/task.yaml
#: Bath/task.yaml DebtReminder/task.yaml DeepConcat/task.yaml
#: DestroyAllEnnemies/task.yaml DestroyAnEnnemy/task.yaml DiffCount/task.yaml
#: Factorial/task.yaml Fibonacci/task.yaml FirstSum/task.yaml
#: FizzBuzz/task.yaml Flatten/task.yaml GCD/task.yaml GD/task.yaml
#: GUI/task.yaml Hello/task.yaml HighOrder/task.yaml Hogwarts-I/task.yaml
#: Hogwarts-II/task.yaml Hogwarts-III/task.yaml Hogwarts-IV/task.yaml
#: Hogwarts-V/task.yaml Interests/task.yaml Interval/task.yaml
#: LinkedList/task.yaml Max/task.yaml Median/task.yaml MergeList/task.yaml
#: Min/task.yaml Morse/task.yaml PatternExtraction-I/task.yaml
#: PatternExtraction-II/task.yaml PatternExtraction-III/task.yaml
#: Polynomial/task.yaml Primes/task.yaml Quetelet/task.yaml
#: RecursiveFactorial/task.yaml RecursiveFibonacci/task.yaml
#: RecursiveSum/task.yaml Remainder/task.yaml Sort/task.yaml
#: SpeedingFine/task.yaml StudentConstructor/task.yaml Sum/task.yaml
#: Translator/task.yaml WrongIterations/task.yaml ZooGame/task.yaml
msgid "Implementation"
msgstr ""

#. name, q1, header
#: AmazonConstructor/task.yaml
msgid ""
"Implement the class ``Command`` and the two methods in Python.\n"
"\n"
"We will create the object with:\n"
"\n"
"``command = Command(id_buyer, id_item, quantity_item, price_item)``\n"
"\n"
"and call the class method with:\n"
"\n"
"``command.get_number_total_command()``"
msgstr ""

#: AmazonConstructor/src/TestAmazon.py:17
#: StudentConstructor/src/TestStudent.py:21
msgid "You did not provide the init or str methods."
msgstr ""

#: AmazonConstructor/src/TestAmazon.py:24
msgid ""
"With the following data: {}, {}, {}, {} for the command created, you "
"returned {} instead of {}"
msgstr ""

#: AmazonConstructor/src/TestAmazon.py:40
msgid "you do not get the correct number of Command"
msgstr ""

#: AmazonConstructor/src/TestAmazon.py:42
msgid "you do not get the correct total price of all Command"
msgstr ""

#. context
#: AmazonPay/task.yaml
msgid ""
"\n"
"As the manager of the Amazon Dispatch center, you also have to pay your "
"-slaves- employees.\n"
"\n"
"To do so, you have to create a function ``pay_employee``, that take an "
"``employee`` in parameter and the ``number of hours`` it has worked.\n"
"\n"
"you then have to call the function ``receive_salary`` of the object "
"``employee`` with the argument ``hours_worked`` multiplied by the ``pay``"
" of the employee (an attribute of the object)\n"
"\n"
"\n"
"\n"
"The problem is that you know the data could have some problems. So you "
"decide to create custom exception to take in account all possible "
"problems.\n"
"\n"
"You have to create (and raise them if necessary) the following "
"**exceptions** :\n"
"\n"
"* ``EmployeeDidntWorked`` : if the employee has worked 0 hours\n"
"* ``EmployeeWorkedNegatively`` : if the employee worked less than 0 hours"
" (Yes, the data can have weird problems)\n"
"* ``EmployeeWorkedTooMuch`` : if the employee worked more than possible "
"(24*31 = 744 hours)\n"
"* ``PayIsNegative`` : if the pay of the employee is negative\n"
"* ``PayIsTooBig`` : if an employee has a pay per hour bigger than 100$\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: AmazonPay/task.yaml
msgid "Session 9: Amazon dispatch center must pay"
msgstr ""

#. name, q1, header
#: AmazonPay/task.yaml
msgid ""
"Implement the 5 custom error and the function ``pay_employee(employee, "
"hours_worked)``\n"
"\n"
"The class ``employee`` is already implemented, and look like this :\n"
"\n"
".. code-block:: python\n"
"\n"
"  # attributes\n"
"  pay # the salary per hour\n"
"\n"
"  # functions\n"
"  receive_salary(much) # receive salary of the month"
msgstr ""

#: AmazonPay/src/TestAmazonPay.py:16
msgid "The function `pay_employee` does not exist."
msgstr ""

#: AmazonPay/src/TestAmazonPay.py:25
msgid ""
"your function pay_employees does not give the good salary to the "
"employee, should be {} and you give {}"
msgstr ""

#: AmazonPay/src/TestAmazonPay.py:33
msgid "the employee did not work, you should raise an exception"
msgstr ""

#: AmazonPay/src/TestAmazonPay.py:36
msgid "the employee worked negatively, you should raise an exception"
msgstr ""

#: AmazonPay/src/TestAmazonPay.py:39
msgid "the employee worked too much, you should raise an exception"
msgstr ""

#: AmazonPay/src/TestAmazonPay.py:42 AmazonPay/src/TestAmazonPay.py:45
msgid "the employee is payed negatively, you should raise an exception"
msgstr ""

#. author
#: Average/task.yaml DeepConcat/task.yaml DiffCount/task.yaml
#: DummyScript/task.yaml Factorial/task.yaml Fibonacci/task.yaml
#: FirstSum/task.yaml FizzBuzz/task.yaml Flatten/task.yaml GCD/task.yaml
#: GD/task.yaml Hogwarts-I/task.yaml Hogwarts-II/task.yaml
#: Hogwarts-III/task.yaml Hogwarts-IV/task.yaml Hogwarts-V/task.yaml
#: Interests/task.yaml Interval/task.yaml Max/task.yaml Median/task.yaml
#: Memoization/task.yaml Min/task.yaml Morse/task.yaml
#: PatternExtraction-I/task.yaml PatternExtraction-II/task.yaml
#: PatternExtraction-III/task.yaml Primes/task.yaml Quetelet/task.yaml
#: RecursiveFactorial/task.yaml RecursiveFibonacci/task.yaml
#: RecursiveSum/task.yaml Remainder/task.yaml SessTest_QCM/task.yaml
#: Sort/task.yaml SpeedingFine/task.yaml StudentConstructor/task.yaml
#: Sum/task.yaml Translator/task.yaml
msgid "Tanguy De Bels"
msgstr ""

#. context
#: Average/task.yaml
msgid ""
"The method ``average(list)`` returns the arithmetic mean of the elements "
"contained in list, except if ``list`` is empty in which case it should "
"return ``None``.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Average/task.yaml
msgid "Session 4: Average"
msgstr ""

#. name, q1, header
#: Average/task.yaml
msgid ""
"Provide the body of the following method:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def average(list):"
msgstr ""

#: Average/src/TestAverage.py:14
msgid "The average of {} is {} and you returned {}."
msgstr ""

#: Average/src/TestAverage.py:22 Max/src/TestMax.py:25
msgid "When the list is empty you should return None."
msgstr ""

#. author
#: Bath/task.yaml DebtReminder/task.yaml GUI/task.yaml Hello/task.yaml
#: Polynomial/task.yaml WrongIterations/task.yaml ZooGame/task.yaml
msgid "Simon Gustin"
msgstr ""

#. context
#: Bath/task.yaml
msgid ""
"Lucie wants to take a bath, but her bathtub has a hole in it.\n"
"If she opens up the tap, **12L** flow in the bathtub **every minute**, "
"and **1L** flows out the hole **every minute**.\n"
"\n"
"You would like to know **how many minutes** she would wait until the "
"bathtub is filled with at least **80L** of water,\n"
"and would also like to **simulate the growth of volume of water** in "
"Python.\n"
"\n"
"First, compute the number of minutes needed to have **exactly 80L** in "
"the bathtub (as a floating point number)\n"
"and store it in a variable called ``filled_time``.\n"
"Then, store the current volume of water in a variable called "
"``water_vol`` (starting at 0) and use a ``for`` loop\n"
"in which, at each iteration (representing each minute), the volume of "
"water would be added/removed the volume of water flowing out the "
"tap/hole.\n"
"In other word, on each iteration, ``water_vol`` should **increase by 12L "
"and decrease by 1L**.\n"
"\n"
"The ``for`` loop should stop on the first iteration where the volume of "
"water is larger than 80L.\n"
"This can be computed from ``filled_time``.\n"
"\n"
"*Note: you can round a floating point number to the first larger integer "
"using the following code:*\n"
"\n"
".. code-block:: python\n"
"\n"
"    float_nb = 3.14\n"
"    int_nb = ceil(float_nb)  # `int_nb` is equal to 4\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Bath/task.yaml
msgid "Session 1: Bathtub with a hole"
msgstr ""

#: Bath/src/TestBath.py:14
msgid ""
"You don't have the good answer when computing the time to fill the "
"bathtub ({}min)."
msgstr ""

#: Bath/src/TestBath.py:16
msgid ""
"You did not name the variable `filled_time` correctly (is it out of the "
"`for` loop?)"
msgstr ""

#: Bath/src/TestBath.py:21
msgid ""
"You did not compute the right value for the volume of water ({}L). Did "
"you do the right number of iterations?"
msgstr ""

#: Bath/src/TestBath.py:23
msgid "You did not name the variable `water_vol` correctly."
msgstr ""

#. context
#: DebtReminder/task.yaml
msgid ""
"You and your friends often **lend each other money**.\n"
"Rather than using convenient applications to remember who owes how much "
"money to who,\n"
"you decide to make your own Python program for this task.\n"
"\n"
"Specifically, you would like to have a way to\n"
"\n"
"* tell **who owes money to whom**;\n"
"\n"
"* **change the money counts** when someone pays someone else back or when"
" someone lends money to someone else;\n"
"\n"
"* **add a person** that borrows and/or lends money;\n"
"\n"
"* compute the **sum of all the money currently borrowed**.\n"
"\n"
"Note that at all times, any money lent to someone should be borrowed by "
"the lender.\n"
"In other words, if *Woody* has lent *3€* to *Buzz*, your program should "
"say that *Buzz owes 3€ to Woody* and that *Woody owes -3€ to Buzz*.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: DebtReminder/task.yaml
msgid "Session 7: Debt reminder"
msgstr ""

#. name, q1, header
#: DebtReminder/task.yaml
msgid ""
"To do this, you will use a **dictionary of dictionaries** called "
"``borrowed_money``, indexed by the **names of the people** (as strings)."
"\n"
"The first index will be the name of the \"borrower\"; the second the name"
" of the \"lender\".\n"
"\n"
"For example, if *Woody* has lent *3€* to *Buzz*, your dictionary should "
"be as follows:\n"
"\n"
".. code-block:: python\n"
"\n"
"    borrowed_money[\"Buzz\"][\"Woody\"] == 3  # Read \"Buzz owes Woody "
"3€\"\n"
"    borrowed_money[\"Woody\"][\"Buzz\"] == -3\n"
"\n"
"Consequently, you can get a dictionary which contains all the money Buzz "
"borrows anyone:\n"
"\n"
".. code-block:: python\n"
"\n"
"   borrowed_money[\"Buzz\"] == {\"Woody\": 3, \"Hamm\": 60, \"Rex\": -5}\n"
"\n"
"**Make a function** ``give_money(borrowed_money, from_person, to_person, "
"amount)``\n"
"which would be called when ``from_person`` gives ``amount`` € to "
"``to_person``\n"
"(either because ``from_person`` lends money to ``to_person`` or because "
"they pay back the money they borrowed).\n"
"If any of the 2 people aren't already keys in the dictionary, they should"
" be added to it.\n"
"You should raise a ``ValueError`` in case someone tries to give money to "
"themself.\n"
"\n"
"**Make another function** ``total_money_borrowed(borrowed_money)``\n"
"which will return the total amount of money borrowed at that time in the "
"group\n"
"(that is, the sum of the positive amounts of money in the dictionaries).\n"
"\n"
"*Note: you should raise a* ``ValueError`` *if any of the arguments fed to"
" those functions\n"
"are invalid (i.e. if names are not strings, if* ``borrowed_money`` *is "
"not a dictionary or if the amount of money is not an integer or a float)."
"\n"
"You can test if a variable is of the right type in the following way:*\n"
"\n"
".. code-block:: python\n"
"\n"
"   variable = 5\n"
"   type(variable) == int  # returns True\n"
"   # OR\n"
"   isinstance(variable, int)  # returns True\n"
"\n"
"Finally, **implement the example** that Mark lends Bill and Steve 2 000 "
"000€,\n"
"Serguei lends Bill 5 000 000€, Bill lends Larry 6 000 000€ and Larry "
"lends Linus 5.5€.\n"
"Then, Steve pays Mark back. This should be using the variable "
"``borrowed_money``."
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:14
msgid "`borrowed_money` must be of type `dict`."
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:16
msgid "The variable `borrowed_money` doesn't exist."
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:17
msgid "The function `give_money` does not exist."
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:18
msgid "The function `total_money_borrowed` does not exist."
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:37
msgid "After 5 transactions between 4 people, you got {} instead of {}."
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:40
msgid ""
"With {}, you computed a total amount of money borrowed of {} instead of "
"{}."
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:42
msgid ""
"You wrongly raised an exception while using `give_money()` or "
"`total_money_borrowed()` with valid arguments: {}('{}')"
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:62
msgid ""
"You wrongly raised an exception while using `give_money()` with invalid "
"arguments: {}('{}')"
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:72
msgid ""
"You wrongly raised an exception while using `total_money_borrowed()` with"
" invalid arguments: {}('{}')"
msgstr ""

#: DebtReminder/src/TestDebtReminder.py:77
msgid "For the example asked, you got an incorrect answer: {}"
msgstr ""

#. context
#: DeepConcat/task.yaml
msgid ""
"Suppose we have a multi-level depth list of which the elements are all "
"strings.\n"
"\n"
"*Example*: [\"a\",[\"b\",\"6\"],\"e\",[\"5\",[\"g\",\"h\"]],\"i\"]\n"
"\n"
"Create a function deepconcat(l) that traverses this structure and creates"
" a new string which is the concatenation of all the strings appearing in "
"that structure.\n"
"\n"
"*Example*:\n"
"deepconcat([\"a\",[\"b\",\"6\"],\"e\",[\"5\",[\"g\",\"h\"]],\"i\"])\n"
"=> returns \"ab6de5ghi\"\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: DeepConcat/task.yaml
msgid "Session 8: Deep concatenation"
msgstr ""

#. name, q1, header
#: DeepConcat/task.yaml
msgid "Implement the function ``deep_concat(l)`` in Python."
msgstr ""

#: DeepConcat/src/TestConcat.py:29 Fibonacci/src/TestFibonacci.py:14
#: Flatten/src/TestFlatten.py:28 GCD/src/TestGcd.py:13
#: Hogwarts-I/src/TestChecker.py:15 Hogwarts-II/src/TestSort.py:14
#: Hogwarts-III/src/TestAdmission.py:32 Hogwarts-IV/src/TestQuidditch.py:29
#: Hogwarts-V/src/TestHouseCup.py:32 Max/src/TestMax.py:13
#: Memoization/src/TestMemoization.py:15 Memoization/src/TestMemoization.py:18
#: Memoization/src/TestMemoization.py:21 Morse/src/TestMorse.py:20
#: PatternExtraction-I/src/TestExtractor.py:29
#: PatternExtraction-II/src/TestTreatment.py:34
#: PatternExtraction-III/src/TestCollection.py:26 Primes/src/TestPrimes.py:13
#: Quetelet/src/TestQuetelet.py:18 SpeedingFine/src/TestFine.py:14
#: Translator/src/TestTranslator.py:20
msgid "You did not name the method as expected."
msgstr ""

#: DeepConcat/src/TestConcat.py:33
msgid ""
"The flatten version of {} is supposed to be an empty string and you "
"returned {}. \n"
" You should watch you behaviour in case of empty lists."
msgstr ""

#: DeepConcat/src/TestConcat.py:41 Flatten/src/TestFlatten.py:40
msgid "The flatten version of {} is {} and you returned {}."
msgstr ""

#. context
#: DestroyAllEnnemies/task.yaml
msgid ""
"You are still working on your next big game, *God of massive destruction "
"Game Of The Century edition*, and now you need to implement a better "
"combat system.\n"
"\n"
"For this exercice, you will need to implement three classes : "
"``Character``, ``Cratos`` and ``Drauf``.\n"
"\n"
"Your manager thought it was too easy with a weapon, so *Cratos* will "
"fight with is bare fists for this exercice. So no weapons.\n"
"\n"
"``Cratos`` and ``Drauf`` will inherit from ``Character``.\n"
"\n"
"* The ``Cratos`` class represent the player, and the ``Drauf`` is a basic"
" ennemy.\n"
"\n"
"* The ``Character`` class will have to have the attributes ``life`` and "
"``attack_point``, and the functions ``attack`` and ``get_hit``.\n"
"\n"
"* The ``Cratos`` class also have an attribute ``experience`` and a "
"``function gain_XP``.\n"
"\n"
"* *Cratos* starts with 100 life, 10 damage and 0 experience. The *Drauf* "
"will have its variables set with the constructor.\n"
"\n"
"* The function ``attack`` will get a ``Character`` to attack as "
"parameter.\n"
"\n"
"* The function ``get_hit`` will reduce the ``life`` of the object by the "
"``damage`` indicated as parameter.\n"
"\n"
"* The function ``gain_XP`` will increase the XP of the player by the "
"``amount`` in parameters. Every 10 point of experience, the damage of "
"*Cratos* will increase by 1 (the amount of XP gain can be higher than 10;"
" be careful to take that in account)\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: DestroyAllEnnemies/task.yaml
msgid "Session 10: Kill them all"
msgstr ""

#. name, q1, header
#: DestroyAllEnnemies/task.yaml
msgid ""
"You have to implement the following :\n"
"\n"
"The class ``Character``\n"
"\n"
".. code-block:: python\n"
"\n"
"  #attributes\n"
"  life\n"
"  attack_point\n"
"\n"
"  #functions\n"
"  attack(target)\n"
"  get_hit(damage)\n"
"\n"
"The class ``Cratos``\n"
"\n"
".. code-block:: python\n"
"\n"
"  #attributes\n"
"  experience\n"
"\n"
"  #functions\n"
"  __init__()\n"
"  gain_XP(amount)\n"
"\n"
"The class ``Drauf``\n"
"\n"
".. code-block:: python\n"
"\n"
"  #functions\n"
"  __init__(life, damage)"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:16
msgid "Does the class `Character` exist?"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:20
#: DestroyAnEnnemy/src/TestDestroy.py:16
msgid "Does the class `Cratos` exist?"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:24
#: DestroyAnEnnemy/src/TestDestroy.py:20
msgid "Does the class `Drauf` exist?"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:27
msgid "Your class `Character` does not have an attribute `life`."
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:28
msgid "Your class `Character` does not have a method `attack`."
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:29
msgid "Your class `Character` does not have a method `get_hit`."
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:30
msgid "Your class `Character` does not have an attribute `attack_point`."
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:34
msgid "Your class `Cratos` does not have a method `gain_XP`."
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:37
msgid "Your class `Drauf` have a method `gain_XP` which it shouldn't have."
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:39
msgid "Your class `Drauf` have an attribute `experience` which it shouldn't have."
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:45
msgid "The Cratos constructed has not the good life, it has {} instead of {}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:48
msgid ""
"The Cratos constructed has not the good attack_point, it has {} instead "
"of {}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:51
msgid ""
"The Cratos constructed has not the good experience, it has {} instead of "
"{}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:59
#: DestroyAnEnnemy/src/TestDestroy.py:56
msgid "The Drauf constructed has not the good life, it has {} instead of {}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:62
msgid ""
"The Drauf constructed has not the good attack_point, it has {} instead of"
" {}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:69
#: DestroyAllEnnemies/src/TestDestroy.py:90
msgid "The Cratos has not the good attack_point, it has {} instead of {}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:70
#: DestroyAllEnnemies/src/TestDestroy.py:92
msgid "The Cratos has not the good experience, it has {} instead of {}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:91
msgid "The Cratos has not the good life, it has {} instead of {}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:93
msgid "The Drauf has not the good attack_point, it has {} instead of {}"
msgstr ""

#: DestroyAllEnnemies/src/TestDestroy.py:94
#: DestroyAnEnnemy/src/TestDestroy.py:86
msgid "The Drauf has not the good life, it has {} instead of {}"
msgstr ""

#. context
#: DestroyAnEnnemy/task.yaml
msgid ""
"You are still working on your next big game, *God of massive destruction "
"Game Of The Century edition*, and now you need to implement a basic "
"combat system.\n"
"\n"
"For this exercise, you will need to implement three classes : ``Cratos``,"
" ``Drauf`` and ``Weapon``.\n"
"\n"
"The ``Cratos`` class represent the player, the ``Drauf`` is a basic "
"ennemy, and the ``Weapon`` is a weapon usable by *Cratos*.\n"
"\n"
"* For the moment, only *Cratos* can attack.\n"
"\n"
"* *Cratos* can equip a *Weapon*, and hit a *Drauf*.\n"
"\n"
"* The *Weapon* has a certain attack, and the *Drauf* has life.\n"
"\n"
"* The Drauf has the ``method get_hit(damage)`` and Cratos has the "
"function ``hit(ennemy)``.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: DestroyAnEnnemy/task.yaml
msgid "Session 9: Kill an ennemy"
msgstr ""

#. name, q1, header
#: DestroyAnEnnemy/task.yaml
msgid ""
"You have to implement the following :\n"
"\n"
"The class ``Weapon``\n"
"\n"
".. code-block:: python\n"
"\n"
"  #attributes\n"
"  attack\n"
"\n"
"  #methods\n"
"  __init__(attack)\n"
"\n"
"The class ``Cratos``\n"
"\n"
".. code-block:: python\n"
"\n"
"  #attributes\n"
"  weapon\n"
"\n"
"  #methods\n"
"  __init__(weapon)\n"
"  set_weapon(weapon) # change the weapon\n"
"  hit(enemy) # hit the ennemy with the weapon attack and reduce its hp\n"
"\n"
"The class ``Drauf``\n"
"\n"
".. code-block:: python\n"
"\n"
"  #attributes\n"
"  life\n"
"\n"
"  #methods\n"
"  __init__(life)\n"
"  get_hit(damage) # reduce the life by the damage taken"
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:24
msgid "Does the class `Weapon` exist?"
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:27
msgid "Your class `Cratos` does not have a method `__init__`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:28
msgid "Your class `Cratos` does not have an attribute `weapon`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:29
msgid "Your class `Cratos` does not have a method `set_weapon`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:30
msgid "Your class `Cratos` does not have a method `hit`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:33
msgid "Your class `Weapon` does not have a method `__init__`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:34
msgid "Your class `Weapon` does not have an attribute `attack`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:37
msgid "Your class `Drauf` does not have a method `__init__`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:38
msgid "Your class `Drauf` does not have an attribute `life`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:39
msgid "Your class `Drauf` does not have a method `get_hit`."
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:45
msgid "The Weapon constructed has not the good attack, it has {} instead of {}"
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:50
msgid ""
"The Cratos constructed has not the good weapon, make sure you set it in "
"the constructor"
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:82
msgid "The Weapon has not the good attack, it has {} instead of {}"
msgstr ""

#: DestroyAnEnnemy/src/TestDestroy.py:84
msgid "The Cratos has not the good weapon, make sure set_weapon is correct"
msgstr ""

#. context
#: DiffCount/task.yaml
msgid ""
"The method ``diff_count(lst)`` returns the number of different elements "
"contained in the list ``lst``.\n"
"\n"
"\n"
"*For example:*\n"
"\n"
"- If ``lst`` equals ``[3, 5, 3]`` then the method should return 2.\n"
"\n"
"- If all the elements are the same, it should return 1.\n"
"\n"
"- If the list ``lst`` is empty, it should return 0.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: DiffCount/task.yaml
msgid "Session 4: Difference counter"
msgstr ""

#. name, q1, header
#: DiffCount/task.yaml
msgid ""
"Provide the body of the following method:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def diff_count(lst):"
msgstr ""

#: DiffCount/src/TestCount.py:15
msgid "The number of different elements of {} is {} and you returned {}."
msgstr ""

#. author
#: DoubleLink/task.yaml HighOrder/task.yaml MergeList/task.yaml
msgid "Luis Tascon Gutierrez"
msgstr ""

#. context
#: DoubleLink/task.yaml
msgid ""
"A student in the 3rd year Bachelor told you, he learned about the *Turing"
" Machine* in his course of *Calculability*.\n"
"\n"
"The *Turing Machine* works with a memory tape. It's an infinitly long "
"tape with character in it. He told you, that it's really complicated but "
"he tends to exaggerate all the time.\n"
"\n"
"You want to prove him that it's not so complicated and you'll implement a"
" tape like the *Turing Machine*.\n"
"\n"
"You have to create a LinkedList where each ``Node`` has a link with the "
"previous and the next ``Node``.\n"
"\n"
"You have in all time a pointer to a ``Node`` and you can move the pointer"
" to the left and to the right. This pointer allow you to read the string "
"in the node you're looking at.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: DoubleLink/task.yaml
msgid "Session 11 : Double Link"
msgstr ""

#. name, q1, name
#: DoubleLink/task.yaml
msgid "Node"
msgstr ""

#. name, q1, header
#: DoubleLink/task.yaml
msgid ""
"Create the class ``Node`` with at least the following methods:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def __init__(s)\n"
"    def get_text()\n"
"    def set_text(s)\n"
"\n"
"The ``Node`` has a link with the previous and the next ``Node``.\n"
"Each ``Node`` contains its own ``value``, a string.\n"
"\n"
"The methods ``get_text`` return the string in the ``Node``.\n"
"And ``set_text`` change the string by ``s``."
msgstr ""

#. name, q2, name
#: DoubleLink/task.yaml
msgid "Double LinkedList"
msgstr ""

#. name, q2, header
#: DoubleLink/task.yaml
msgid ""
"Create the class ``Tape`` with at least the following methods:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def __init__()\n"
"    def next()\n"
"    def previous()\n"
"    def get_length()\n"
"    def add(s)\n"
"    def write(s)\n"
"    def read()\n"
"\n"
"* The ``next()`` method advance of one node and after give the value of "
"the ``Node`` reached.\n"
"\n"
"* The ``previous()`` method step back of one node and give the value of "
"the ``Node`` reached.\n"
"\n"
"* The ``next()`` and ``previous()`` methods return ``None`` and doesn't "
"move if there is no ``Node`` to reach.\n"
"\n"
"* The ``get_length()`` method return the *number of Nodes* in the "
"``Tape``.\n"
"\n"
"* The ``add(s)`` method add a new ``Node`` with the string ``s`` in last "
"place. To call this method with no *Node* put the pointer on the *first "
"Node*. To call this method when there is already a *Node* doesn't change "
"the position of the pointer.\n"
"\n"
"* The ``write(s)`` method change the string of the actual node with "
"``s``. If There is no node, it does nothing.\n"
"\n"
"* The ``read()`` method return the string of the actual node. If There is"
" no node, it return ``None``."
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:17
msgid "@1@: The Node class does not have the method {}"
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:24
msgid "@2@: The Tape class does not have the method {}"
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:35
msgid "@1@: node.get_text() give {} and it should give {}"
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:44
msgid "Be sure you don't have any infinite loop."
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:46
msgid ""
"@2@: Method init or read doesn't work. read() has given {} and it should "
"have returned {}"
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:53
msgid "@2@: Method next doesn't work."
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:66
msgid "@2@: Method previous doesn't work."
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:80
msgid ""
"@2@: Method length doesn't give the good answer. It gives {} and it "
"should give {}"
msgstr ""

#: DoubleLink/src/TestDoubleLink.py:89
msgid "@2@: Method write/read doesn't work. read() gives {} and it should give {}"
msgstr ""

#. context
#: DummyScript/task.yaml SessTest_QCM/task.yaml
msgid ""
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: DummyScript/task.yaml
msgid "Dummy Script"
msgstr ""

#. name, q1, name
#: DummyScript/task.yaml
msgid "Sandbox"
msgstr ""

#. context
#: Factorial/task.yaml
msgid ""
"In mathematics, the factorial of a strictly positive integer ``x``, "
"denoted as :math:`x!` is the product of all strictly positive integers "
"less than or equal to ``x``. The factorial of 0 is defined as 1. "
"Calculate the factorial of an integer ``x`` and store the computed value "
"in the variable ``result``.\n"
"\n"
"*Examples*:\n"
"\n"
"* :math:`5! = 5 × 4 × 3 × 2 × 1 = 120`\n"
"\n"
"* :math:`0! = 1`\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"\n"
"   bodyHeight = 0;\n"
"   function postSize() {\n"
"       if (document.body.scrollHeight != bodyHeight) {\n"
"           bodyHeight = document.body.scrollHeight;\n"
"           console.log(\"postSize !\");\n"
"           window.parent.postMessage({height: "
"document.body.scrollHeight}, \"*\");\n"
"       }\n"
"    };\n"
"    var target = document.querySelector('body');\n"
"\n"
"    var observer = new MutationObserver(postSize);\n"
"\n"
"    // configuration of the observer:\n"
"    var config = { attributes: true, subtree: true }\n"
"\n"
"   // pass in the target node, as well as the observer options\n"
"    observer.observe(target, config);\n"
"   $(document).ready(function(){\n"
"       setTimeout(postSize, 0);\n"
"   });\n"
"   </script>"
msgstr ""

#. name
#: Factorial/task.yaml
msgid "Session 1: Factorial"
msgstr ""

#. name, q1, header
#: Factorial/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    x = ... #the number\n"
"    result = ... #store in this variable the factorial of x"
msgstr ""

#: Factorial/src/TestFactorial.py:15 RecursiveFactorial/src/TestFactorial.py:32
msgid "The factorial of the integer {} is {} and you returned {}."
msgstr ""

#: Factorial/src/TestFactorial.py:22 RecursiveFactorial/src/TestFactorial.py:39
msgid "The factorial of 0 is 1 and you returned {}."
msgstr ""

#. context
#: Fibonacci/task.yaml
msgid ""
"In mathematics, the `Fibonacci series "
"<https://en.wikipedia.org/wiki/Fibonacci_number>`_ are the numbers in the"
" following sequence of integers, which is characterized by the fact that "
"every number after the first two is the sum of the two preceding ones:\n"
"\n"
"/*Example*: :math:`0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...`\n"
"\n"
"A very simple algorithm would be:\n"
"$$\\\\text{F}_0 = 0$$\n"
"$$\\\\text{F}_1 = 1$$\n"
"$$\\\\text{F}_n = \\\\text{F}_{n-1} + \\\\text{F}_{n-2}$$\n"
"\n"
"Create a function ``fibonacci(n)`` that prints the nth element of the "
"Fibonacci sequence.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Fibonacci/task.yaml
msgid "Session 3: Fibonacci"
msgstr ""

#. name, q1, header
#: Fibonacci/task.yaml
msgid "Implement the function ``fibonacci(n)`` in Python."
msgstr ""

#: Fibonacci/src/TestFibonacci.py:18 Memoization/src/TestMemoization.py:34
#: Memoization/src/TestMemoization.py:52
#: RecursiveFibonacci/src/TestFibonacci.py:33
msgid "The {}th fibonacci number is {} and you returned {}."
msgstr ""

#: Fibonacci/src/TestFibonacci.py:25 RecursiveFibonacci/src/TestFibonacci.py:40
msgid "For 0 the fibonacci number is 0 and you returned {}."
msgstr ""

#: Fibonacci/src/TestFibonacci.py:30 RecursiveFibonacci/src/TestFibonacci.py:45
msgid "For 1 the fibonacci number is 1 and you returned {}."
msgstr ""

#. context
#: FirstSum/task.yaml
msgid ""
"In programming, one of the first exercise asked for practice is to "
"calculate the sum of the ``n`` first positive integers. It is to "
"illustrate the capacity to repeat a process easily and with a few lines "
"of computers.\n"
"\n"
"To do so, use a ``for`` loop with a range.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: FirstSum/task.yaml
msgid "Session 1: Sum"
msgstr ""

#. name, q1, header
#: FirstSum/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    x = ... #the number\n"
"    result = ... #store in this variable the sum of the x first positive "
"integers"
msgstr ""

#: FirstSum/src/TestSum.py:15
msgid "The sum of the {} first integers is {} and you returned {}."
msgstr ""

#. context
#: FizzBuzz/task.yaml
msgid ""
"Write a program allowing to play the game `fizzbuzz "
"<https://en.wikipedia.org/wiki/Fizz_buzz>`_.\n"
"You receive a number (stored in variable ``i``).\n"
"We will implement a simplified version of the game. For a given integer "
"``i``, the game will :\n"
"\n"
"- Store the string \"``fizz``\" in the variable ``temp`` if the number is"
" divisible by  3.\n"
"- Store the string \"``buzz``\" in the variable ``temp`` if the number is"
" divisible by 5.\n"
"- Store the string \"``fizzbuzz``\" in the variable ``temp`` if the "
"number is divisible by 3 and by 5.\n"
"- Store the string \"``no``\" in the variable ``temp`` if the number is "
"not divisible by 3 nor by 5.\n"
"\n"
".. code-block:: python\n"
"\n"
"    i = ...    # the number to check (i >= 1)\n"
"    temp = ... # \"fizz\", \"buzz\", \"fizzbuzz\" or \"no\" depending on "
"i's value\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: FizzBuzz/task.yaml
msgid "Session 2: FizzBuzz"
msgstr ""

#. name, q1, header
#: FizzBuzz/task.yaml
msgid ""
"``i`` is provided and you need to store the adequate return value in "
"``temp``"
msgstr ""

#: FizzBuzz/src/TestFizzBuzz.py:15 FizzBuzz/src/TestFizzBuzz.py:23
msgid "With {} as input the program should return {} and you returned {}."
msgstr ""

#. context
#: Flatten/task.yaml
msgid ""
"In Python, we can store many kinds of elements in a list, including lists"
" themselves.\n"
"\n"
"*Example*: :math:`[1,[2, 3], 4,[5, [6, 7]], 8]`\n"
"\n"
"Such structures are hard to read for a program, however, and often need "
"to be flattened to a simple one-level depth list before. The flattened "
"version of the list above would be: :math:`[1, 2, 3, 4, 5, 6, 7, 8]`\n"
"\n"
"Create a function ``flatten(l)`` that returns a one-level depth list from"
" a multi-level depth list.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Flatten/task.yaml
msgid "Session 8: Flatten"
msgstr ""

#. name, q1, header
#: Flatten/task.yaml
msgid "Implement the function ``flatten(l)`` in Python."
msgstr ""

#: Flatten/src/TestFlatten.py:32
msgid ""
"The flatten version of {} is {} and you returned {}. \n"
" You should watch you behaviour in case of empty lists."
msgstr ""

#. context
#: GCD/task.yaml
msgid ""
"The Greatest Common Divisor of two natural numbers ``a`` and ``b`` is the"
" biggest natural number ``k`` such that the division of ``a`` and ``b`` "
"by this natural ``k`` is an entire division.\n"
"\n"
"Euclid found a very simple recursive algorithm to find the GCD of two "
"numbers:\n"
"$$\\\\text{gcd}(a,0) = a$$\n"
"$$\\\\text{gcd}(a,b) = \\\\text{gcd}(b,a\\\\%b)$$\n"
"\n"
"Recall that the operator ``%`` returns the remainder of the euclidian "
"division.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: GCD/task.yaml
msgid "Session 3: Greatest common divisor"
msgstr ""

#. name, q1, header
#: GCD/task.yaml
msgid "Implement the function ``gcd(a,b)`` in Python."
msgstr ""

#: GCD/src/TestGcd.py:18
msgid ""
"Test zero - The greatest common divisor between {} and {} is {} and you "
"returned {}."
msgstr ""

#: GCD/src/TestGcd.py:26
msgid "The greatest common divisor between {} and {} is {} and you returned {}."
msgstr ""

#. context
#: GD/task.yaml
msgid ""
"The Greatest Divisor of a number ``a`` is the biggest number ( except "
"``a`` itself) such that the division of ``a`` by this natural is an "
"entire division.\n"
"\n"
"Since \\\\(0\\\\) is divisible by any natural this may cause some "
"problems if you will look for the bigger one, so we expect you to return "
"``None``.\n"
"\n"
"Recall that the operator ``%`` returns the remainder of the Euclidian "
"division.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: GD/task.yaml
msgid "Session 3: Greatest divisor"
msgstr ""

#. name, q1, header
#: GD/task.yaml
msgid ""
"Provide the body of the following method:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def greatest_divisor(a):"
msgstr ""

#: GD/src/TestGd.py:14
msgid "The greatest divisor of {} is {} and you returned {}."
msgstr ""

#: GD/src/TestGd.py:21
msgid ""
"The expected answer for the greatest divisor of 0 should be None and you "
"returned {}."
msgstr ""

#. context
#: GUI/task.yaml
msgid ""
"As a good student of this course, you want to level up a little bit your "
"skills in programming\n"
"and decided to try and create a *Graphical User Interface* (*GUI*).\n"
"\n"
"Specifically, you will create a class that represents a **clickable "
"button** that can be added on a screen.\n"
"Buttons should have:\n"
"\n"
"* a **width** (in pixel)\n"
"\n"
"* a **height** (in pixel)\n"
"\n"
"* a **label** (what is written on the button)\n"
"\n"
"* a **callback function** (the function called when the button is "
"clicked)\n"
"\n"
"They should also have a method to \"*stringify*\" the instance of the "
"button,\n"
"that is, return a **description of the button as a string**. For example,"
"\n"
"a button 200px wide, 50px high, with the label \"Click me!\" and a "
"callback called \"explode_kittens\"\n"
"would stringify to `\"Button { size:(200,50), label:'Click me!', "
"callback:'explode_kittens' }\"`.\n"
"\n"
"*Note: the canonical way to call a function that returns a string "
"description of an object in Python\n"
"is the following:*\n"
"\n"
".. code-block:: python\n"
"\n"
"    class Example:\n"
"        def __str__():  # Stringify method\n"
"            return \"description\"\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: GUI/task.yaml
msgid "Session 9: GUI button"
msgstr ""

#. name, q1, header
#: GUI/task.yaml
msgid ""
"Provide the implementation of the class ``Button`` with the following "
"**attributes**:\n"
"\n"
"* ``size``: a tuple *(<width>, <height>)*\n"
"\n"
"* ``label``: a string\n"
"\n"
"* ``callback``: a function\n"
"\n"
"and with the following **methods**:\n"
"\n"
"* a constructor which takes as arguments a tuple with 2 positive integers"
" as the size, a string as the label and a function as the callback\n"
"\n"
"* ``__str__()``: returns a string description of the current instance\n"
"\n"
"* ``set_size(new_size)``: changes the size to a new tuple with two "
"positive integers\n"
"\n"
"* ``set_label(new_label)``: changes the label to a new string\n"
"\n"
"* ``on_click(new_callback)``: changes the callback to a new function (you"
" don't need to check the number of parameters of the function)\n"
"\n"
"* ``clicked()``: calls the callback function\n"
"\n"
"You should raise an ``ValueError`` if you get an **invalid argument** to "
"a method.\n"
"\n"
"*Note (1): you can test whether a variable contains a function,\n"
"you can use the function ``callable(var)`` which returns ``True`` if "
"``var`` contains a function.*\n"
"\n"
"*Note (2): you can get the name of a function (stored in a variable or "
"not) using their attribute ``__name__``.\n"
"For example:*\n"
"\n"
".. code-block:: python\n"
"\n"
"    def fn():\n"
"        pass\n"
"    var = fn\n"
"    print(fn.__name__)  # prints \"fn\"\n"
"    print(var.__name__)  # prints \"fn\""
msgstr ""

#: GUI/src/TestGUI.py:21
msgid "Does the class `Button` exist?"
msgstr ""

#: GUI/src/TestGUI.py:23
msgid "You wrongly raised an exception when creating a button: {}('{}')"
msgstr ""

#: GUI/src/TestGUI.py:24
msgid "Your button does not have an attribute called 'size'."
msgstr ""

#: GUI/src/TestGUI.py:25
msgid "Your button does not have an attribute called 'label'."
msgstr ""

#: GUI/src/TestGUI.py:26
msgid "Your button does not have an attribute called 'callback'."
msgstr ""

#: GUI/src/TestGUI.py:37 GUI/src/TestGUI.py:45 GUI/src/TestGUI.py:56
msgid ""
"You wrongly raise an exception when creating a button with size {}, label"
" '{}' and a valid callback: {}('{}')."
msgstr ""

#: GUI/src/TestGUI.py:71
msgid ""
"You raise an unexpected exception when creating a button with invalid "
"size {} and valid label and callback: {}('{}')."
msgstr ""

#: GUI/src/TestGUI.py:79
msgid ""
"You raise an unexpected exception when creating a button with invalid "
"label '{}' and valid size and callback: {}('{}')."
msgstr ""

#: GUI/src/TestGUI.py:88
msgid ""
"You raise an unexpected exception when creating a button with invalid "
"callback {} and valid size and label: {}('{}')."
msgstr ""

#: GUI/src/TestGUI.py:101
msgid ""
"Changing the size of the button doesn't change the value of `size` "
"correctly: {} instead of {}."
msgstr ""

#: GUI/src/TestGUI.py:107
msgid ""
"You wrongly raised an exception while creating a button with valid size "
"{}, label '{}' and a valid callback, and changing the size to the valid "
"size {}: {}('{}')"
msgstr ""

#: GUI/src/TestGUI.py:129
msgid ""
"You wrongly raised an exception while creating a button with valid size "
"{}, label {} and a valid callback, and changing the size to the invalid "
"size {} : {}('{}')."
msgstr ""

#: GUI/src/TestGUI.py:142
msgid ""
"Changing the label of the button doesn't change the value of `label` "
"correctly: {} instead of {}."
msgstr ""

#: GUI/src/TestGUI.py:148
msgid ""
"You wrongly raised an exception while creating a button with valid size "
"{}, label '{}' and a valid callback, and changing the label to the valid "
"label {}: {}('{}')"
msgstr ""

#: GUI/src/TestGUI.py:163
msgid ""
"You wrongly raised an exception while creating a button with valid size "
"{}, label {} and a valid callback, and changing the label to the invalid "
"label {} : {}('{}')."
msgstr ""

#: GUI/src/TestGUI.py:183
msgid ""
"Changing the callback of the button doesn't change the value of "
"`callback` correctly: {} instead of {}."
msgstr ""

#: GUI/src/TestGUI.py:190
msgid ""
"You wrongly raised an exception while creating a button with valid size "
"{}, label '{}' and a valid callback, and changing the callback to a valid"
" callback: {}('{}')"
msgstr ""

#: GUI/src/TestGUI.py:206
msgid ""
"You wrongly raised an exception while creating a button with valid size "
"{}, label {} and a valid callback, and changing the callback to an "
"invalid callback: {}('{}')."
msgstr ""

#: GUI/src/TestGUI.py:221
msgid ""
"Calling the method `clicked()` on your button doesn't call the callback "
"method."
msgstr ""

#: GUI/src/TestGUI.py:225
msgid ""
"You wrongly raised an exception while creating a button with valid size "
"{}, label {} and a valid callback, and calling the callback: {}('{}')."
msgstr ""

#. context
#: Hello/task.yaml
msgid ""
"You are a programmer and want to **say hello** to the user of your "
"program. The user's name is stored in a **variable** called ``name``\n"
"and you want to store your greeting in a **variable** called ``hello``.\n"
"This string will have the **following form**: \"Hello, ``name``!\"\n"
"\n"
"For example, if ``name`` is assigned \"Charles\", your code would put "
"\"Hello, Charles!\" in the variable ``hello``.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Hello/task.yaml
msgid "Session 4: Hello"
msgstr ""

#. name, q1, header
#: Hello/task.yaml
msgid "Store your greeting string in ``hello`` (with ``name`` the user's name)"
msgstr ""

#: Hello/src/TestHello.py:14
msgid ""
"When \"Charles\" is the user's name, ``hello`` contains \"{}\" instead of"
" \"Hello, Charles!\""
msgstr ""

#: Hello/src/TestHello.py:20 Hello/src/TestHello.py:27
msgid ""
"When \"{0}\" is the user's name, ``hello`` contains \"{1}\" instead of "
"\"Hello, {0}!\""
msgstr ""

#. context
#: HighOrder/task.yaml
msgid ""
"Your roommate is studying in high school to become a primary school "
"teacher. She has to teach the multiplication tables to her children in "
"her internship.\n"
"\n"
"You're kind and you decided to help her. So you decided to create a list "
"that return all the multiplication tables that she want.\n"
"\n"
"You have to implement a function ``mult_table(n)`` wich gives you a list "
"of functions from 0 to n (included) that compute the multiplication table"
" of the index.\n"
"\n"
"For exemple, you execute ``l = mult_table(5)`` and you receive a list of "
"5 functions (it has to be lambdas) where ``l[3]`` is a function that "
"compute the multiplication table of 3 (``x = l[3](6)`` gives you 3*6).\n"
"\n"
"*Note: if you want to capture an outside variable for your lambda you can"
" define a parameter that does not change. exemple: ``lambda x,y=i:x+y``*"
"\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: HighOrder/task.yaml
msgid "Session 8: High Order - Lambda"
msgstr ""

#. name, q1, header
#: HighOrder/task.yaml
msgid ""
"Provide the body of the following method\n"
"\n"
".. code-block:: python\n"
"\n"
"    def mult_table(n):"
msgstr ""

#: HighOrder/src/TestHighOrder.py:20
msgid ""
"The function {} with the argument {} of the list\n"
" gives {} when the answer should be {}.\n"
" You may have not captured the variable in the lambda. (see in the "
"instructions)"
msgstr ""

#: HighOrder/src/TestHighOrder.py:32
msgid "The length of the list is {} and it should be {}."
msgstr ""

#. context
#: Hogwarts-I/task.yaml
msgid ""
"Once again, the **Fat Lady** drank all the wine of the *drunken monks* "
"painting and **Sir Cadogan** isn't available to replace her. The access "
"to the *Gryffindor Common Room* isn't guarded and the **Slytherins** are "
"up to no good.\n"
"\n"
"We need you to quickly design a password checker to fill in the big void "
"left by the *Fat Lady's departure*.\n"
"\n"
"Create a function ``portrait(right_password, entered_password)`` that "
"will return ``True`` if the two passwords are identical and ``False`` "
"otherwise.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Hogwarts-I/task.yaml
msgid "Session 4: Hogwarts - Fat Lady"
msgstr ""

#. name, q1, header
#: Hogwarts-I/task.yaml
msgid ""
"Implement the function ``portrait(right_password, entered_password)`` in "
"Python."
msgstr ""

#: Hogwarts-I/src/TestChecker.py:20
msgid ""
"Are you really belonging to this house? \n"
" Watch if you're really checking the equality there."
msgstr ""

#: Hogwarts-I/src/TestChecker.py:29
msgid ""
"Are you really belonging to this house? \n"
" With the right and entered password being {} and {}  you compared  them "
"as {}ly identical."
msgstr ""

#. context
#: Hogwarts-II/task.yaml
msgid ""
"Once again, it is time for the *sorting ceremony*. The first years are "
"waiting in line, in front of an old hat, both anxious and excited. The "
"director makes a great speech to welcome them and gives the floor to a "
"mysterious intervenant.\n"
"\n"
"Every first year is amazed when the **Sorting Hat** emerges from its "
"silent and starts to sings one of its famous `song "
"<http://fr.harrypotter.wikia.com/wiki/Chansons_du_Choixpeau_magique>`_.\n"
"\n"
"However, the old hat got a bit too far and meets now some performance "
"issues. It is voiceless and won't be up to the task for the next part of "
"the ceremony. Luckily enough we still have access to the founders' "
"knowledge and we will be able to sort the students with your help.\n"
"\n"
"Create a function ``house_designation(student_qualities)`` that will "
"return a list with the names of the houses from the one a student should "
"be attributed to to the last one he sould go to. To decide his "
"attribution, you should move him in the house in which he has the most "
"affinities. If two houses shall be equals, return the first one in the "
"given knowledge.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Hogwarts-II/task.yaml
msgid "Session 5: Hogwarts - Sorting Hat"
msgstr ""

#. name, q1, header
#: Hogwarts-II/task.yaml
msgid ""
"Implement the function ``house_designation(student_qualities)`` in "
"Python.\n"
"\n"
"You already have the ancestral knowledge of the **Hat** at your disposal:"
"\n"
"\n"
".. code-block:: python\n"
"\n"
"    knowledge = [['Gryffindor', ['brave', 'strong', 'bold']],\n"
"                 ['Ravenclaw', ['smart', 'wise', 'curious']],\n"
"                 ['Hufflepuff', ['loyal', 'patient', 'hard-working']],\n"
"                 ['Slytherin', ['cunning', 'wily', 'malignant']]]"
msgstr ""

#: Hogwarts-II/src/TestSort.py:18
msgid ""
"Should you really belong to this house? \n"
" Wasn't there any equals houses for the qualities {}?"
msgstr ""

#: Hogwarts-II/src/TestSort.py:27
msgid ""
"Should you really belong to this house? \n"
"Your returned {}, wasn't there an order more suited for the qualities {}?"
msgstr ""

#. context
#: Hogwarts-III/task.yaml
msgid ""
"\n"
"All your life you wondered *\"Where did this stupid owl misplace my "
"letter?\"*, *\"When will I finally go to Hogwarts?\"* or even on the end "
"*\"Am I actually a squib?\"*. Do not worry!\n"
"\n"
"**Hogwarts** finally contacted you for an important task. Even if you're "
"too old to learn **witchcraft**, they're lucky because you learned a "
"different kind of magic: **programming**.\n"
"\n"
"They decided to modernize a bit their admission services and want you to "
"create a program that will be able to fill a file (template of the "
"admission letter) with the name of a student. This way, they will be able"
" to save on the feathers and reduce the workload of the elves!\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Hogwarts-III/task.yaml
msgid "Session 6: Hogwarts - Admission letter"
msgstr ""

#. name, q1, header
#: Hogwarts-III/task.yaml
msgid ""
"Implement the function ``write(letter_template, name)`` in Python.\n"
"\n"
"Don't forget to raise an exception if any should occur."
msgstr ""

#: Hogwarts-III/src/TestAdmission.py:14
msgid ""
"HOGWARTS SCHOOL of WITCHCRAFT and WIZARDRY \n"
" Headmaster : Albus Dumbledore \n"
" (Order of Merlin, First Class, Grand Sorc., Chf. Warlock, Supreme "
"Mugwump, International Confed. of Wizards) \n"
"\n"
" Dear Mr/Ms. #, \n"
"\n"
" We are pleased to inform you that you have been accepted at Hogwarts "
"School of Witchcraft and Wizardry. Please find enclosed a list of all "
"necessary books and equipment. \n"
"\n"
" Term begins on 1 September. We await your owl by no later than 31 July."
" \n"
"\n"
" Yours sincerely, \n"
"\n"
" Minerva McGonagall \n"
" Deputy Headmistress \n"
msgstr ""

#: Hogwarts-III/src/TestAdmission.py:37
msgid "The letter expected of the given file was {} and you returned {}."
msgstr ""

#. context
#: Hogwarts-IV/task.yaml
msgid ""
"The rules of *Quidditch* were established in 1750 by the **Department of "
"Magic Games and Sports**. And it is nowhere said that the referee can't "
"use a bit of help.\n"
"\n"
"**Madam Hooch** is quite busy already looking for *blatching*, "
"*blurting*, *blagging* and many other nasty quidditch faults. So she "
"thought you could design a program that would decide the winner of a "
"match based on the list of the points.\n"
"\n"
"The scores list would be provided as a file. The content of this file "
"would follow this format:\n"
"\n"
"- Two first lines: **Names of the teams**\n"
"- Lines after: **Team_scoring** *points*\n"
"\n"
"In case of error, just raise it.\n"
"\n"
"Remember that the catch of the *golden snitch* (150 points) means the end"
" of the match.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Hogwarts-IV/task.yaml
msgid "Session 6: Hogwarts - Quidditch"
msgstr ""

#. name, q1, header
#: Hogwarts-IV/task.yaml
msgid "Implement the function ``referee(score_file)`` in Python."
msgstr ""

#: Hogwarts-IV/src/TestQuidditch.py:33
msgid ""
"Did the bludger hit you too hard? For the given score {} you decided {} "
"won."
msgstr ""

#: Hogwarts-IV/src/TestQuidditch.py:42
msgid ""
"Did the bludger hit you too hard? The match is supposed to end after the "
"caught of the golden snitch."
msgstr ""

#. context
#: Hogwarts-V/task.yaml
msgid ""
"During the last session of the **duelling club**, the hourglasses keeping"
" the points of each house were destroyed beyond any *reparo* and the "
"celebration of the *house cup* is upon us!\n"
"\n"
"Luckily **Filch**, who doesn't trust magic, kept the account of each "
"achievement perpetrated (his words, not mine) by the students. He "
"provided you with a dictionnary containing the belonging of each student "
"to their house and the scroll with their winnings.\n"
"\n"
"The scores list would be provided as a file. The content of this file "
"would follow this format:\n"
"\n"
"- Lines: **student_name** *points*\n"
"\n"
"Please return the name of the winning house, in the case of an ex-aequo: "
"return the list of the best houses.\n"
"\n"
"In case of error, just raise it.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Hogwarts-V/task.yaml
msgid "Session 7: Hogwarts - House cup"
msgstr ""

#. name, q1, header
#: Hogwarts-V/task.yaml
msgid ""
"Implement the function ``winning_house(scroll)`` in Python.\n"
"\n"
"You already have the list of student sorted by house at your disposal:\n"
"\n"
".. code-block:: python\n"
"\n"
"    students = {'gryffindor': ['Harry', 'Hermione', 'Ron', 'Ginny', "
"'Fred', ' Georges', 'Neville'],\n"
"                'ravenclaw': ['Cho', 'Luna', 'Sybill', 'Marcus', "
"'Marietta', 'Terry', 'Penelope'],\n"
"                'hufflepuff': ['Pomona', 'Zacharias', 'Teddy', 'Cedric', "
"'Nymphadora', 'Newton', 'Justin'],\n"
"                'slytherin': ['Malfoy', 'Severus', 'Dolores', 'Horace', "
"'Blaise', 'Pansy', 'Bellatrix']}"
msgstr ""

#: Hogwarts-V/src/TestHouseCup.py:36 Hogwarts-V/src/TestHouseCup.py:45
msgid ""
"For the given students' achievements {} you decided {} won but {} clearly"
" did."
msgstr ""

#. context
#: Interests/task.yaml
msgid ""
"Suppose you now have ``base`` € on your savings account.\n"
"\n"
"If you leave it ``x`` years on that account at a fixed cummulative "
"interest rate of ``y`` %, what will be the balance on your account after "
"these ``x`` years?\n"
"\n"
"Return that amount.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Interests/task.yaml
msgid "Session 3: Interest calculation"
msgstr ""

#. name, q1, header
#: Interests/task.yaml
msgid ""
"Provide the body of the following method:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def interests(base, y, x):"
msgstr ""

#: Interests/src/TestInterests.py:16
msgid ""
"When calling interests(base, y, x) with base = {}€ , y = {}% and x = {} "
"years you returned {} but the expected value was {}."
msgstr ""

#. context
#: Interval/task.yaml
msgid ""
"Suppose the variables ``a``, ``b`` and ``x`` contain a natural number. "
"Write a code fragment that would assign the boolean value ``True`` to the"
" variable named ``interval`` if ``x`` belongs to ``[a, b]``. Assign it "
"the value ``False`` otherwise.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Interval/task.yaml
msgid "Session 2: Interval"
msgstr ""

#. name, q1, header
#: Interval/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    a = ... #lower bound of the interval\n"
"    b = ... #upper bound of the interval\n"
"    x = ... #variable to evaluate\n"
"    interval = ... #store in this variable the belonging of x in the "
"interval\n"
msgstr ""

#: Interval/src/TestInterval.py:17 Interval/src/TestInterval.py:25
msgid "The belonging of {} to [{}, {}] is {} and you returned {}."
msgstr ""

#. author
#: LinkedList/task.yaml
msgid "Jacob Eliat-Eliat"
msgstr ""

#. context
#: LinkedList/task.yaml
msgid ""
"Create a class LinkedList that has an ``add`` method which takes a value "
"as parameter, and a ``get_reverse`` method which returns the values of "
"the linked list in reverse order.\n"
"\n"
"If the ``add`` method is called like this:\n"
"\n"
".. code-block:: python\n"
"\n"
"  add(\"first\")\n"
"  add(\"second\")\n"
"  add(\"third\")\n"
"\n"
"Then ``get_reverse()`` should return *\"thirdsecondfirst\"*\n"
"\n"
"Use another class ``Node`` with at least the methods ``get_value`` and "
"``get_next``\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: LinkedList/task.yaml
msgid "Session 11: LinkedList"
msgstr ""

#. name, q1, header
#: LinkedList/task.yaml
msgid ""
"Implement the class ``LinkedList`` with ``add`` and ``get_reverse`` "
"functions, use a ``Node`` class with ``get_next`` and ``get_value``"
msgstr ""

#: LinkedList/src/TestLinkedList.py:15
msgid "You did not provide the LinkedList class"
msgstr ""

#: LinkedList/src/TestLinkedList.py:17
msgid "You did not provide the required methods"
msgstr ""

#: LinkedList/src/TestLinkedList.py:18
msgid "You did not provide the Node class"
msgstr ""

#: LinkedList/src/TestLinkedList.py:20
msgid "You did not provide the required methods in the Node class"
msgstr ""

#: LinkedList/src/TestLinkedList.py:24
msgid ""
"When adding nothing get_reverse is supposed to return an empty string and"
" you returned {}. \n"
" You should watch you behaviour in case of empty lists."
msgstr ""

#: LinkedList/src/TestLinkedList.py:36
msgid "The answer should be {} and you returned {}."
msgstr ""

#. context
#: LinkedListChildren/task.yaml
msgid ""
"You are the manager of a vacation camp. To make sure you don't lose any "
"children in your visit of a local forest, every children must look to a "
"buddy, which will look to another buddy, etc. Until every children has a "
"buddy and is the buddy of someone.\n"
"\n"
"You are sure that if you take a children, and follow the trail of "
"buddies, you will visit all children.\n"
"To check if every child is here, you just need to check that every "
"children has his buddy, and check that for all children.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: LinkedListChildren/task.yaml
msgid "Session 11 : Lost Children"
msgstr ""

#. name, q1, name
#: LinkedListChildren/task.yaml
msgid "Check the children"
msgstr ""

#. name, q1, header
#: LinkedListChildren/task.yaml
msgid ""
"You have to check if every children is here. To do so, you have acces to "
"the first child with the variable ``first_child`` (instance of the class "
"Child). The class Child has the function is_next_valid to check if it has"
" his buddy, and the function next_child to get his buddy.\n"
"\n"
".. code-block:: python\n"
"\n"
"    class Child:\n"
"        def is_next_valid()  #return a boolean\n"
"        def next_child()     #return a Child\n"
"\n"
"\n"
"Don't forget to stop checking once you have checked every children.\n"
"You have to complete the body of the function, and return true if all the"
" children are here, and false if not.\n"
"\n"
".. code-block:: python\n"
"\n"
"    def is_every_child_here(first_child):"
msgstr ""

#: LinkedListChildren/src/TestChildren.py:13
#: LinkedListChildren/src/TestChildren.py:25
msgid ""
"Be sure you stop once you are back to the first children.\n"
"You don't want to have more than you already have..."
msgstr ""

#: LinkedListChildren/src/TestChildren.py:22
msgid ""
"Well... You got it wrong, so try again.\n"
"Are you blind? Everyone's there!"
msgstr ""

#: LinkedListChildren/src/TestChildren.py:33
msgid ""
"Well... You got it wrong, so try again.\n"
"You actually lost a child"
msgstr ""

#. context
#: LoadSaveGame/task.yaml
msgid ""
"For your next big game, *God of massive destruction Game Of The Century "
"edition*, you have to create a function to load and to save the data of "
"the player.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: LoadSaveGame/task.yaml
msgid "Session 6 : Save your game"
msgstr ""

#. name, q1, name
#: LoadSaveGame/task.yaml
msgid "Save and Load"
msgstr ""

#. name, q1, header
#: LoadSaveGame/task.yaml
msgid ""
"You have to create two function, one to save the data and one to load the"
" data previously saved.\n"
"You are free to store the data like you want in the file, but putting one"
" integer per line is probably the easiest.\n"
"If there is no file to load when using the function load_data (for "
"exemple, the player starts a new game), you must raise a "
"``FileNotFoundError``.\n"
"\n"
"The two function will have these definition :\n"
"\n"
".. code-block:: python\n"
"\n"
"    #save the 4 integer to the file named filename\n"
"    def save_data(filename, life, mana, position_x, position_y)\n"
"\n"
"    #return a tuple containing (life, mana, position_x, position_y) "
"previously saved\n"
"    def load_data(filename)"
msgstr ""

#: LoadSaveGame/src/TestLoadSave.py:17 LoadSaveGame/src/TestLoadSave.py:29
#: LoadSaveGame/src/TestLoadSave.py:38
msgid ""
"You don't even create a file... This is a bit annoying for a saving "
"function"
msgstr ""

#: LoadSaveGame/src/TestLoadSave.py:22
msgid ""
"the player can't start a new game, and is very sad... Check that the file"
" exist"
msgstr ""

#: LoadSaveGame/src/TestLoadSave.py:31 LoadSaveGame/src/TestLoadSave.py:40
msgid "The player loaded the wrong value."
msgstr ""

#. context
#: Max/task.yaml
msgid ""
"The method ``maximum(lst)`` returns the maximum of the elements contained"
" in the list ``lst``.\n"
"\n"
"The value ``None`` is returned if the list ``lst`` is empty.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Max/task.yaml
msgid "Session 4: Maximum"
msgstr ""

#. name, q1, header
#: Max/task.yaml
msgid "Implement the function ``maximum(lst)`` in Python."
msgstr ""

#: Max/src/TestMax.py:17
msgid "The maximum of {} is {} and you returned {}."
msgstr ""

#. context
#: Median/task.yaml
msgid ""
"Suppose the variables ``a``, ``b`` and ``c`` contain a natural number.\n"
"\n"
"Write a code fragment that assigns to the variable ``median`` the median "
"value of these numbers.\n"
"\n"
"As a reminder, the median of three values is the value such that there is"
" exactly one value lower than (or equal to) it and one value higher than "
"(or equal to) it.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Median/task.yaml
msgid "Session 2: Median"
msgstr ""

#. name, q1, header
#: Median/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    a = ... #variable to evaluate\n"
"    b = ... #variable to evaluate\n"
"    c = ... #variable to evaluate\n"
"    median = ... #store in this variable the median of the three variables"
msgstr ""

#: Median/src/TestMedian.py:17
msgid "The median of {} is {} and you returned {}."
msgstr ""

#. context
#: Memoization/task.yaml
msgid ""
"Memoization refers to remembering results of method calls based on the "
"method inputs and then returning the remembered result rather than "
"computing the result again. You can think of it as a cache for method "
"results.\n"
"\n"
"The use of this practice will enable you to boost the speed of yout "
"programs when you need to call a function with the same parameters "
"multiple times.\n"
"\n"
"You will now implement a function that will store the calls of a function"
" in a dedicated dictionnary and use it in later calls.\n"
"\n"
"Note that besides the ``memoization`` function, you should also implement"
" the methods ``factorial`` and ``fibonacci`` able to make use of the "
"memoization principle.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Memoization/task.yaml
msgid "Session 8: Memoization"
msgstr ""

#. name, q1, name
#: Memoization/task.yaml
msgid "Memoization implementation"
msgstr ""

#. name, q1, header
#: Memoization/task.yaml
msgid ""
"Implement the function ``memoization(fun, n)`` in Python.\n"
"\n"
"With ``fun`` as the function on which the memoization will be used and "
"``n`` the argument of the function.\n"
"\n"
"A dictionnary ``mapping`` is provided and should be used to map each "
"function to its corresponding dictionnary.\n"
"\n"
"Note that the dictionaries have not yet enough entries to pass the tests."
"\n"
"\n"
".. code-block:: python\n"
"\n"
"    mapping = {fibonacci: fibo, factorial: fact, ...}"
msgstr ""

#. name, q2, name
#: Memoization/task.yaml
msgid "Fibonacci implementation"
msgstr ""

#. name, q2, header
#: Memoization/task.yaml
msgid ""
"Implement a function ``fibonacci(n)`` in Python which will be used by and"
" use  ``memoization``."
msgstr ""

#. name, q3, name
#: Memoization/task.yaml
msgid "Factorial implementation"
msgstr ""

#. name, q3, header
#: Memoization/task.yaml
msgid ""
"Implement a function ``factorial(n)`` in Python which will be used by and"
" use ``memoization``."
msgstr ""

#: Memoization/src/TestMemoization.py:25
msgid ""
"The sum of the {}th first numbers is {} and you returned {}. Your "
"memoization algorithm seem to not support other functions."
msgstr ""

#: Memoization/src/TestMemoization.py:42
msgid "The factorial of {} is {} and you returned {}."
msgstr ""

#: Memoization/src/TestMemoization.py:48
msgid "It seems that you didn't use the memoization properly."
msgstr ""

#. context
#: MergeList/task.yaml
msgid ""
"You are part of the organisation of the **5 and 10 miles** in Louvain-la-"
"Neuve. But the system went down just before the start.\n"
"\n"
"There were two student to take note of the arrival of the runners. "
"Happily, there were two lines to count, your job is to get one list of "
"the two, to have a general ranking.\n"
"\n"
"The lists you'll receive are a succession of ``['name', time]`` with the "
"time in increasing order. Create a fonction ``merge(first_list, "
"second_list)`` that will return one list wich has the elements of the 2 "
"lists in order.\n"
"\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: MergeList/task.yaml
msgid "Session 5: Lists merging"
msgstr ""

#. name, q1, header
#: MergeList/task.yaml
msgid ""
"Provide the body of the following method\n"
"\n"
".. code-block:: python\n"
"\n"
"    def merge(first_list, second_list):"
msgstr ""

#: MergeList/src/TestMergeList.py:13
msgid "The lists may be empty."
msgstr ""

#: MergeList/src/TestMergeList.py:18
msgid "One list may be empty."
msgstr ""

#: MergeList/src/TestMergeList.py:26
msgid "The two lists are {} and {} and you returned {}."
msgstr ""

#. context
#: Min/task.yaml
msgid ""
"Suppose the variables ``a``, ``b`` and ``c`` contain a natural number.\n"
"\n"
"Write a code fragment that assigns to the variable ``min`` the smallest "
"of these numbers.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"\n"
"   bodyHeight = 0;\n"
"   function postSize() {\n"
"       if (document.body.scrollHeight != bodyHeight) {\n"
"           bodyHeight = document.body.scrollHeight;\n"
"           console.log(\"postSize !\");\n"
"           window.parent.postMessage({height: "
"document.body.scrollHeight}, \"*\");\n"
"       }\n"
"    };\n"
"    var target = document.querySelector('body');\n"
"\n"
"    var observer = new MutationObserver(postSize);\n"
"\n"
"    var config = { attributes: true, subtree: true }\n"
"    observer.observe(target, config);\n"
"   $(document).ready(function(){\n"
"       setTimeout(postSize, 0);\n"
"   });\n"
"   </script>"
msgstr ""

#. name
#: Min/task.yaml
msgid "Session 2: Minimum"
msgstr ""

#. name, q1, header
#: Min/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    a = ... #variable to evaluate\n"
"    b = ... #variable to evaluate\n"
"    c = ... #variable to evaluate\n"
"    minima = ... #store in this variable the smallest of the three "
"variables"
msgstr ""

#: Min/src/TestMin.py:17
msgid "The minimum of {} is {} and you returned {}."
msgstr ""

#. context
#: Morse/task.yaml
msgid ""
"After the third world war, the planet is now in a post-apocalyptic state."
" You're one of the only survivors and are looking for a bit of "
"fellowship. But you can't exactly swipe tinder since most of the network "
"is down.\n"
"\n"
"Fortunately your best friend is with you... Your computer (Yes, that's "
"lame)! With its help you'll be able to reach the rest of the world. Since"
" you've got a `Morse <https://en.wikipedia.org/wiki/Morse_code>`_ "
"dictionnay stored on your computer (Matt Damon did have an ASCII table in"
" \"Alone on Mars\" it's not so incongruous) you'll use it to translate "
"your text and emit it through an old citizen band radio.\n"
"\n"
"Note that if you should try to translate any unregistered character, you "
"should raise a ``TypeError`` exception.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Morse/task.yaml
msgid "Session 7: Apocalypse - Morse translation"
msgstr ""

#. name, q1, header
#: Morse/task.yaml
msgid ""
"Implement the function ``translate(data)`` in Python.\n"
"\n"
"With ``data`` as the string you wish to encode in Morse and a dictionnary"
" ``morse`` usable to do the translations.\n"
"\n"
".. code-block:: python\n"
"\n"
"  morse = {\n"
"  \"A\" : \".-\",\n"
"  \"B\" : \"-...\",\n"
"  \"C\" : \"-.-.\",\n"
"  \"D\" : \"-..\",\n"
"  \"E\" : \".\",\n"
"  ...\n"
"  }"
msgstr ""

#: Morse/src/TestMorse.py:24
msgid ""
"The representation of {} in Morse is {} and you returned {}. You did not "
"use the given dictionary."
msgstr ""

#: Morse/src/TestMorse.py:31
msgid "The representation of {} in Morse is {} and you returned {}."
msgstr ""

#: Morse/src/TestMorse.py:39
msgid "{} should have raised an error due to lowercase elements but did not."
msgstr ""

#. context
#: PatternExtraction-I/task.yaml
msgid ""
"`Anonymous <https://en.wikipedia.org/wiki/Anonymous_(group)>`_ just hired"
" you on the dark web for a dangerous task. They've been trying to crack a"
" code for a few days but didn't achieve anything... yet!\n"
"\n"
"They want you to build a function that will analyze each character in a "
"given code and determine its nature. The goal is simple, they intend to "
"use the information you will provide to look for a pattern in the code.\n"
"\n"
"Create a function ``extract(code)`` to provide information regarding the "
"nature of each element of the code:\n"
"\n"
"For example, when given the code ``'AeB7'`` as input the function should "
"produce ``'vowel-up vowel-low consonant-up number'`` as output. In "
"general :\n"
"\n"
"* Add ``number`` to the answer if the element of the code is a digit.\n"
"* Add ``vowel`` to the answer if the element of the code is a vowel.\n"
"* Add ``consonant`` to the answer if the element of the code is a "
"consonant.\n"
"* Follow it by ``-up`` if the vowel or consonant is in upper case.\n"
"* Follow it by ``-low`` if the vowel or consonant is in lower case.\n"
"\n"
"*Example*:\n"
"\n"
"With the code ``'AeB7'`` the function would output 'vowel-up vowel-low "
"consonant-up number'\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: PatternExtraction-I/task.yaml
msgid "Session 4: Anonymous - Information extraction"
msgstr ""

#. name, q1, header
#: PatternExtraction-I/task.yaml
msgid "Implement the function ``extract(code)`` in Python."
msgstr ""

#: PatternExtraction-I/src/TestExtractor.py:33
msgid "The natures of {} is {} and you returned {}."
msgstr ""

#. context
#: PatternExtraction-II/task.yaml
msgid ""
"Since your work was quite remarkable, `Anonymous "
"<https://en.wikipedia.org/wiki/Anonymous_(group)>`_ contacted you again "
"with another dangerous task. They're short-handed and would like you to "
"treat the data you've been providing them.\n"
"\n"
"They want you to build a a function that will transform your precedent "
"ouput into something easier and quickier to process. It is up to you to "
"transform the data into an usable pattern!\n"
"\n"
"Create a function ``treatment(data)`` to transform the data you "
"previously returned into a pattern:\n"
"\n"
"Each suite of common elements should be indicated by the nature of the "
"element followed by '*' and its occurence without other elements in "
"between.\n"
"\n"
"*Example*:\n"
"\n"
"With the code ``'66AeB7'`` your precedent function would output 'number "
"number vowel-up vowel-low consonant-up number'.\n"
"\n"
"With this output as input ``treatment`` would output the string 'number*2"
" vowel-up*1 vowel-low*1 consonant-up*1 number*1'\n"
"\n"
"Do not hesitate to use as many submethods as you judge necessary.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: PatternExtraction-II/task.yaml
msgid "Session 4: Anonymous - Information treatment"
msgstr ""

#. name, q1, header
#: PatternExtraction-II/task.yaml
msgid "Implement the function ``treatment(data)`` in Python."
msgstr ""

#: PatternExtraction-II/src/TestTreatment.py:38
msgid "The pattern of {} is {} and you returned {}."
msgstr ""

#: PatternExtraction-II/src/TestTreatment.py:46
msgid "You should pay attention to the ending space of your answer."
msgstr ""

#. context
#: PatternExtraction-III/task.yaml
msgid ""
"`Anonymous <https://en.wikipedia.org/wiki/Anonymous_(group)>`_ was "
"dazzled by your work and decided to entrust you with the analysis of the "
"whole bunch of data they intercepted.\n"
"\n"
"With the help of the  two functions you already designed, you will "
"transform each line of the data into a pattern and extract the number of "
"occurence it can be found in the file.\n"
"\n"
"Create a function ``collect(data)`` to read the file extract the patterns"
" and store them in a dictionary with their occurrences.\n"
"\n"
"In case of error, just raise it.\n"
"\n"
"*Reminder*:\n"
"\n"
"- ``extract(code)``: gives the nature of each element of a string.\n"
"\n"
"- ``treatment(code)``: transform a suite of elements into a pattern.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: PatternExtraction-III/task.yaml
msgid "Session 7: Anonymous - Information collection"
msgstr ""

#. name, q1, header
#: PatternExtraction-III/task.yaml
msgid "Implement the function ``collect(file)`` in Python."
msgstr ""

#: PatternExtraction-III/src/TestCollection.py:30
msgid "The dictionary expected of the given file is {} and you returned {}."
msgstr ""

#. context
#: Polynomial/task.yaml
msgid ""
"You want to use your computer to easily compute a polynomial with the "
"following form:\n"
":math:`y = a x^6 + b x^2 + c`. We give you the coefficients (stored in "
"``a``, ``b`` and ``c``)\n"
"and the variable ``x`` and ask you to put the value of the polynomial at "
"abscissa :math:`x` inside a variable named ``y``.\n"
"\n"
"*Note: there is a way to make this shortly in only one line of code.*\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Polynomial/task.yaml
msgid "Session 1: Polynomial"
msgstr ""

#. name, q1, header
#: Polynomial/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"   y = ...  # Value of the polynomial at abscissa `x`"
msgstr ""

#: Polynomial/src/TestPolynomial.py:22
msgid "With a={}, b={}, c={} and x={}, your code computes {} instead of {}."
msgstr ""

#. context
#: Primes/task.yaml
msgid ""
"`The prime numbers <https://en.wikipedia.org/wiki/Prime_number>`_ , used "
"by mathematicians, are a set of numbers sharing a same property.\n"
"\n"
"A prime is a natural number greater than 1 that has no positive divisors "
"other than 1 and itself. A natural number greater than 1 that is not a "
"prime number is called a composite number.\n"
"\n"
"To calculate prime numbers you can use the principle of *Eratosthene's "
"sieve*: for each successive number, check if it is divisible by the lower"
" prime numbers already found. If it is not divisible by any, it is prime "
"and can be added to the list.\n"
"\n"
"Implement the function ``primes(max)`` that returns the list of all prime"
" numbers until ``max``.\n"
"If ``max`` is negative or zero, the empty list should be returned.\n"
"\n"
"To limit the complexity of your solution, decompose into auxiliary "
"functions as needed.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Primes/task.yaml
msgid "Session 4: Prime numbers"
msgstr ""

#. name, q1, header
#: Primes/task.yaml
msgid "Implement the function ``primes(max)`` in Python."
msgstr ""

#: Primes/src/TestPrimes.py:17
msgid "The prime numbers with a maximum value of {} is {} and you returned {}."
msgstr ""

#: Primes/src/TestPrimes.py:25 Primes/src/TestPrimes.py:33
msgid ""
"The prime numbers with a maximum value of {} is {} and you returned {}. \n"
" You should check the conditions to be a prime number."
msgstr ""

#. context
#: Quetelet/task.yaml
msgid ""
"The `Body mass index (BMI) "
"<https://en.wikipedia.org/wiki/Body_mass_index>`_ or Quetelet index, used"
" by dieticians, is indicative of the condition of a person.\n"
"\n"
"A normal person should have an index between 20 and 25. Below 20, she is "
"considered thin, above 25 overweight.\n"
"Beyond 30, the person is obese!\n"
"\n"
"This index is calculated as the ratio between a person's weight, "
"expressed in kg, and the square of the person's height, expressed in "
"meters.\n"
"\n"
"Create a function ``quetelet(height, weight)`` to calculate a person's "
"Quetelet index and return ``thin`` string for a person with an index "
"strictly less than 20, ``normal`` for a person whose index is between 20 "
"and 25, ``overweight`` if the index is strictly greater than 25 and less "
"than or equal to 30 and ``obese`` when it is strictly greater than 30.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Quetelet/task.yaml
msgid "Session 3: BMI index"
msgstr ""

#. name, q1, header
#: Quetelet/task.yaml
msgid "Implement the function ``quetelet(height, weight)`` in Python."
msgstr ""

#: Quetelet/src/TestQuetelet.py:23
msgid ""
"The quetelet index with a height of {} and a weight of {} is {} and you "
"returned {}. \n"
" You should watch the bounds of your conditions."
msgstr ""

#: Quetelet/src/TestQuetelet.py:32
msgid ""
"The quetelet index with a height of {} and a weight of {} is {} and you "
"returned {}."
msgstr ""

#. context
#: RecursiveFactorial/task.yaml
msgid ""
"In mathematics, the factorial of a strictly positive integer ``x``, noted"
" :math:`x!` is defined as the product of all strictly positive integers "
"less than or equal to ``x``. The factorial of 0 is defined as 1. Write a "
"function that computes the factorial of a given integer x.\n"
"\n"
"*Examples*:\n"
"\n"
"* :math:`5! = 5 × 4 × 3 × 2 × 1 = 120`\n"
"\n"
"* :math:`0! = 1`\n"
"\n"
"Note that is essentially the same question as one that was asked in the "
"first session, except that we now expect you to solve it differently. The"
" use of ``while`` and ``for`` loops will be prohibited and you are "
"expected to solve it by writing a recursive function.\n"
"We also want you to return ``None`` whenever the factorial cannot be "
"computed.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: RecursiveFactorial/task.yaml
msgid "Session 8: Factorial"
msgstr ""

#. name, q1, header
#: RecursiveFactorial/task.yaml
msgid ""
"Provide the body of the following method:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def factorial(x):"
msgstr ""

#: RecursiveFactorial/src/TestFactorial.py:25 RecursiveSum/src/TestSum.py:25
msgid "You did not use recursion in your algorithm "
msgstr ""

#: RecursiveFactorial/src/TestFactorial.py:45
msgid "The factorial of a negative integer {} should be None and you returned {}."
msgstr ""

#. context
#: RecursiveFibonacci/task.yaml
msgid ""
"In mathematics, the `Fibonacci series "
"<https://en.wikipedia.org/wiki/Fibonacci_number>`_ are the numbers in the"
" following sequence of integers, which are characterized by the fact that"
" every number after the first two is the sum of the two preceding ones:\n"
"\n"
"Example: :math:`0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...`\n"
"\n"
"A very simple algorithm would be:\n"
"$$\\\\text{F}_0 = 0$$\n"
"$$\\\\text{F}_1 = 1$$\n"
"$$\\\\text{F}_n = \\\\text{F}_{n-1} + \\\\text{F}_{n-2}$$\n"
"\n"
"Adapt the function which you implemented in session 3 to create a "
"recursive solution to this exercise. You should also return ``None`` in "
"the case of an incongruous input.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: RecursiveFibonacci/task.yaml
msgid "Session 8: Fibonacci"
msgstr ""

#. name, q1, header
#: RecursiveFibonacci/task.yaml
msgid ""
"Provide the body of the following method:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def fibo(x):"
msgstr ""

#: RecursiveFibonacci/src/TestFibonacci.py:26
msgid "You did not use recursion in your algorithm."
msgstr ""

#: RecursiveFibonacci/src/TestFibonacci.py:49
#: RecursiveFibonacci/src/TestFibonacci.py:53
msgid ""
"There can not be a number in a negative place in a sequence, you should "
"have returned None."
msgstr ""

#. context
#: RecursiveSum/task.yaml
msgid ""
"The method ``sum(list)`` returns the sum of the elements contained in "
"``list``.\n"
"\n"
"Example: the sum of :math:`[1, 2, 3]` is :math:`6`\n"
"\n"
"Note that your algorithm should be able to compute the sum even\n"
"when the list ``list`` contains malicious elements (not numbers).\n"
"\n"
"Note that this question is the same question as one that was asked in the"
" fifth session, except that we now expect you to solve it in a recursive "
"way. The use of ``while`` and ``for`` loops will be prohibited to ensure "
"you provide a recursive solution.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: RecursiveSum/task.yaml
msgid "Session 8: Sum"
msgstr ""

#. name, q1, header
#: RecursiveSum/task.yaml Sum/task.yaml
msgid ""
"Provide the body of the following method:\n"
"\n"
".. code-block:: python\n"
"\n"
"    def sum(list):"
msgstr ""

#: RecursiveSum/src/TestSum.py:32 Sum/src/TestSum.py:14
msgid "The sum of {} is {} and you returned {}."
msgstr ""

#: RecursiveSum/src/TestSum.py:40 Sum/src/TestSum.py:22
msgid "The sum of {} is {} and you returned {}. Do you handle floats?"
msgstr ""

#: RecursiveSum/src/TestSum.py:48
msgid "The sum list provided was {}. Did you take care of everything? "
msgstr ""

#: RecursiveSum/src/TestSum.py:60 Sum/src/TestSum.py:42
msgid "When the list is empty you should return 0."
msgstr ""

#. context
#: Remainder/task.yaml
msgid ""
"Suppose the variables ``a`` and ``b`` contain a natural number.\n"
"\n"
"Write a code fragment that assigns the remainder of their division in the"
" variable ``rest``.\n"
"\n"
"To implement your solution, use only a ``while`` loop and subtractions "
"(the simple solution rest = a % b is not allowed; we want to test if you "
"are capable of implementing such an operation yourself).\n"
"\n"
"Note that you should not allow division by 0 and assign the value "
"``None`` to ``rest`` if this would occur.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Remainder/task.yaml
msgid "Session 2: Remainder of an integer division"
msgstr ""

#. name, q1, header
#: Remainder/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    a = ... #variable to evaluate\n"
"    b = ... #variable to evaluate\n"
"    rest = ... #store in this variable the remainder of the division a/b"
msgstr ""

#: Remainder/src/TestRemainder.py:28 Remainder/src/TestRemainder.py:37
msgid "The remainder of the entire division {} / {} is {} and you returned {}."
msgstr ""

#: Remainder/src/TestRemainder.py:46
msgid "The remainder of the entire division {} / {} is None and you returned {}."
msgstr ""

#. name
#: SessTest_QCM/task.yaml
msgid "Session Test: QCM"
msgstr ""

#. name, qcm1, name
#: SessTest_QCM/task.yaml
msgid "Variable assignment"
msgstr ""

#. name, qcm1, header
#: SessTest_QCM/task.yaml
msgid "Pick the piece of code which will print 42."
msgstr ""

#. name, qcm1, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    my var1 = 7\n"
"    my var2 = 6\n"
"    print(my var1 * my var2)"
msgstr ""

#. name, qcm1, feedback
#: SessTest_QCM/task.yaml
msgid ""
"In the Python language, whitespace in a variable's name is not allowed.\n"
"\n"
"You can compensate with:\n"
"\n"
"-CamelCasing: myVar\n"
"\n"
"-Underscores: my_var (prefered Python naming conventions)"
msgstr ""

#. name, qcm1, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    myVar1 = 35\n"
"    myvar2 = 7\n"
"    print(myvar1 + myVar2)"
msgstr ""

#. name, qcm1, feedback
#: SessTest_QCM/task.yaml
msgid ""
"You should pay attention to the name of your variable since Python is "
"case-sensitive."
msgstr ""

#. name, qcm1, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    myVar1 = '4'\n"
"    myvar2 = '2'\n"
"    print(myVar1 + myvar2)"
msgstr ""

#. name, qcm2, name
#. name, qcm3, name
#: SessTest_QCM/task.yaml
msgid "While loops"
msgstr ""

#. name, qcm2, header
#: SessTest_QCM/task.yaml
msgid ""
"Which of the following code fragments calculates the sum of the first "
"``n`` positive integers?"
msgstr ""

#. name, qcm2, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    i = 0\n"
"    sum = 0\n"
"    while i < n:\n"
"        sum = sum+i\n"
"        i+=1"
msgstr ""

#. name, qcm2, feedback
#: SessTest_QCM/task.yaml
msgid "The correct answer is not attained. Didn't you forget an iteration?"
msgstr ""

#. name, qcm2, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    i = n\n"
"    sum = 0\n"
"    while i <= n:\n"
"        sum = sum+i\n"
"        i-=1"
msgstr ""

#. name, qcm2, feedback
#: SessTest_QCM/task.yaml
msgid "Your loop will never end. Check your condition."
msgstr ""

#. name, qcm2, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"        i = 1\n"
"        sum = 0\n"
"    while i < n:\n"
"        sum = sum+i\n"
"        i+=1"
msgstr ""

#. name, qcm2, feedback
#: SessTest_QCM/task.yaml
msgid ""
"The indentation is an extremelly important part of coding in Python since"
" it allows to know in which block the statement is executed. Are ``i`` "
"and ``sum`` supposed to be assigned in a block before the loop?"
msgstr ""

#. name, qcm2, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    i = 1\n"
"    sum = 0\n"
"    while i <= n:\n"
"        sum = sum+i\n"
"        i+=1"
msgstr ""

#. name, qcm3, header
#: SessTest_QCM/task.yaml
msgid ""
"``While`` loops are useful when we need to repeat similar tasks multiple "
"times. In arithmetic, the factorial of a positive integer (``n``) and "
"greater than `1` is defined as the product of all integers less than or "
"equal to ``n``. The factorial of ``n`` is denoted as :math:`n!`. Thus "
":math:`4! = 24`. Among the ``while`` loops below, which one calculates "
"correctly :math:`n!` ?"
msgstr ""

#. name, qcm3, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    n = 7\n"
"    fact = n\n"
"    count = n-1\n"
"    while count > 0:\n"
"        fact = fact * count\n"
"        count+=1"
msgstr ""

#. name, qcm3, feedback
#: SessTest_QCM/task.yaml
msgid "Will your loop stop in other case than `1`?"
msgstr ""

#. name, qcm3, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    n = 7\n"
"    fact = 1\n"
"    count = 2\n"
"    while count < n:\n"
"        fact = fact * count\n"
"        count+=1"
msgstr ""

#. name, qcm3, feedback
#: SessTest_QCM/task.yaml
msgid "Pretty sure you calculated the factorial of `n-1` ."
msgstr ""

#. name, qcm3, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    n = 7\n"
"    fact = 1\n"
"    count = n\n"
"    while count >= 2:\n"
"        fact = fact * count\n"
"        count-=1"
msgstr ""

#. name, qcm4, name
#: SessTest_QCM/task.yaml
msgid "Python syntax"
msgstr ""

#. name, qcm4, header
#: SessTest_QCM/task.yaml
msgid ""
"Which of the following program fragments respects the syntax and "
"semantics of the language?"
msgstr ""

#. name, qcm4, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    >>> x = 4\n"
"    >>> y = 'test'\n"
"    >>> z = 8\n"
"    >>>     print(x)\n"
msgstr ""

#. name, qcm4, feedback
#: SessTest_QCM/task.yaml
msgid ""
"The indentation is an extremelly important part of coding in Python since"
" it allows to know in which block the statement is executed. In this case"
" your program will meet an unexpected indentation."
msgstr ""

#. name, qcm4, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    >>> x = 4\n"
"    >>> x = 'test'\n"
"    >>> z = 8\n"
"    >>> print(x)\n"
"    4"
msgstr ""

#. name, qcm4, feedback
#: SessTest_QCM/task.yaml
msgid ""
"Since there is no type in Python a variable can contain as well an "
"integer as text.\n"
"\n"
"test would be print with this code fragment."
msgstr ""

#. name, qcm4, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    >>> x = 4\n"
"    >>> y = 'test'\n"
"    >>> z = 8\n"
"    >>> print(x)\n"
"    4"
msgstr ""

#. name, qcm5, name
#: SessTest_QCM/task.yaml
msgid "Comments in Python"
msgstr ""

#. name, qcm5, header
#: SessTest_QCM/task.yaml
msgid "Check the snippets which contain a valid comment."
msgstr ""

#. name, qcm5, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    for i in range(0,5):\n"
"        print(\"#This is a comment\")"
msgstr ""

#. name, qcm5, feedback
#: SessTest_QCM/task.yaml
msgid "The comment is enclosed in a string."
msgstr ""

#. name, qcm5, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    for i in range(0,5):\n"
"        print(i) # This is a comment"
msgstr ""

#. name, qcm5, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    \"\"\" This is a comment\"\"\"\n"
"    for i in range(0,5):\n"
"        print(i)"
msgstr ""

#. name, qcm5, feedback
#: SessTest_QCM/task.yaml
msgid ""
"It is correct BUT don't use triple-quotes; this is for documentation "
"strings not block comments, although it has a similar effect it is best "
"practice to use ``#``"
msgstr ""

#. name, qcm6, name
#: SessTest_QCM/task.yaml
msgid "Python naming conventions"
msgstr ""

#. name, qcm6, header
#: SessTest_QCM/task.yaml
msgid ""
"Which of the following statements are respecting the Python naming "
"conventions?"
msgstr ""

#. name, qcm6, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    myVariable = 'This is lower camel case'"
msgstr ""

#. name, qcm6, feedback
#: SessTest_QCM/task.yaml
msgid ""
"Snake case is usually prefered regarding variables names.\n"
"\n"
"Although lower camel case is allowed for functions names in Python (where"
" that's already the prevailing style)."
msgstr ""

#. name, qcm6, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    my_variable = 'This is snake case'"
msgstr ""

#. name, qcm6, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    MY_VARIABLE = 'This is screaming snake case'"
msgstr ""

#. name, qcm6, feedback
#: SessTest_QCM/task.yaml
msgid ""
"Snake case is usually prefered regarding variables names.\n"
"\n"
"Although screaming snake case is used for constant in Python."
msgstr ""

#. name, qcm6, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    MyVariable = 'This is upper camel case'"
msgstr ""

#. name, qcm6, feedback
#: SessTest_QCM/task.yaml
msgid ""
"Snake case is usually prefered regarding variables names.\n"
"\n"
"Although upper camel case is used for class names in Python."
msgstr ""

#. name, qcm7, name
#: SessTest_QCM/task.yaml
msgid "Exchange variables values"
msgstr ""

#. name, qcm7, header
#: SessTest_QCM/task.yaml
msgid ""
"It is often useful to be able to swap values between variables. Consider "
"the following variables:\n"
"\n"
".. code-block:: python\n"
"\n"
"    a = 42\n"
"    b = 41\n"
"\n"
"Which of following code fragments swap the values correctly?"
msgstr ""

#. name, qcm7, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    b = a\n"
"    a = b"
msgstr ""

#. name, qcm7, feedback
#: SessTest_QCM/task.yaml
msgid ""
"By doing it this way you will lose the value contained in ``b`` and the "
"value of ``a`` will be stored in the 2 variables."
msgstr ""

#. name, qcm7, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    c = b\n"
"    b = a\n"
"    a = c"
msgstr ""

#. name, qcm7, feedback
#: SessTest_QCM/task.yaml
msgid ""
"This would work but it is more efficient and clear to do it with this "
"little trick:\n"
"\n"
".. code-block:: python\n"
"\n"
"    a,b = b,a"
msgstr ""

#. name, qcm7, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    a,b = b,a"
msgstr ""

#. name, qcm8, name
#: SessTest_QCM/task.yaml
msgid "Calculate min"
msgstr ""

#. name, qcm8, header
#: SessTest_QCM/task.yaml
msgid ""
"Consider a program that manipulates two variables: ``a`` and ``b`` . "
"Among the code fragments below, which one correctly stores in the "
"variable ``min`` the minimum of the contents of the variables ``a`` and "
"``b`` ?"
msgstr ""

#. name, qcm8, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    if a > b:\n"
"        min = a\n"
"    else:\n"
"        min = b\n"
msgstr ""

#. name, qcm8, feedback
#: SessTest_QCM/task.yaml
msgid "The maximum is stored in min instead of the minimum with this code."
msgstr ""

#. name, qcm8, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    if a > b:\n"
"    min = a\n"
"    else:\n"
"    min = b\n"
msgstr ""

#. name, qcm8, feedback
#: SessTest_QCM/task.yaml
msgid ""
"The indentation is an extremelly important part of coding in Python since"
" it allows to know in which block the statement is executed. What is "
"executed in this case if the condition is verified?"
msgstr ""

#. name, qcm8, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    if a > b:\n"
"        min = b\n"
"    else:\n"
"        min = a"
msgstr ""

#. name, qcm9, name
#: SessTest_QCM/task.yaml
msgid "Absolute value"
msgstr ""

#. name, qcm9, header
#: SessTest_QCM/task.yaml
msgid ""
"Which of these code fragments places in the variable ``abs`` the absolute"
" value of ``x`` ?"
msgstr ""

#. name, qcm9, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    if x == 0:\n"
"        abs = x\n"
"    else:\n"
"        abs = -x"
msgstr ""

#. name, qcm9, feedback
#: SessTest_QCM/task.yaml
msgid "What happens if ``x`` is a positive integer?"
msgstr ""

#. name, qcm9, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    if x > 0:\n"
"        abs = -x\n"
"    else:\n"
"        abs = x"
msgstr ""

#. name, qcm9, feedback
#: SessTest_QCM/task.yaml
msgid ""
"You should consider carefully the condition used to store `-x` in  "
"``abs`` ."
msgstr ""

#. name, qcm9, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    if x < 0:\n"
"        abs = -x\n"
"    else:\n"
"        abs = x"
msgstr ""

#. name, qcm10, name
#: SessTest_QCM/task.yaml
msgid "Intervals"
msgstr ""

#. name, qcm10, header
#: SessTest_QCM/task.yaml
msgid ""
"In mathematics, we define intervals, closed, open and semi-open. The "
"semi-open interval :math:`[3,7[` includes all real numbers that are "
"greater than or equal to `3` and strictly less than 7. Which of the "
"following code fragments display ``true`` on the standard output if and "
"only if ``x`` belongs to the interval :math:`[a, b[` ? We assume for this"
" question that the value stored in the variable ``a`` is strictly less "
"than the one stored in the ``b`` variable."
msgstr ""

#. name, qcm10, text
#: SessTest_QCM/task.yaml
msgid ""
".. code:: python\n"
"\n"
"    if x <= a and x < b:\n"
"        print('true')"
msgstr ""

#. name, qcm10, feedback
#: SessTest_QCM/task.yaml
msgid ""
"Is there any way for ``x`` to be between ``a`` and ``b`` with this "
"condition?"
msgstr ""

#. name, qcm10, text
#: SessTest_QCM/task.yaml
msgid ""
".. code:: python\n"
"\n"
"    if a < x and x < b:\n"
"        print('true')"
msgstr ""

#. name, qcm10, feedback
#: SessTest_QCM/task.yaml
msgid "What happens if ``x == a`` ?"
msgstr ""

#. name, qcm10, text
#: SessTest_QCM/task.yaml
msgid ""
".. code:: python\n"
"\n"
"    if a <= x and x < b:\n"
"        print('true')"
msgstr ""

#. name, qcm11, name
#: SessTest_QCM/task.yaml
msgid "Operators usages"
msgstr ""

#. name, qcm11, header
#: SessTest_QCM/task.yaml
msgid "Which of the following code fragments prints 14?"
msgstr ""

#. name, qcm11, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    print(43/3)"
msgstr ""

#. name, qcm11, feedback
#: SessTest_QCM/task.yaml
msgid "The result of the division is 14.333333334"
msgstr ""

#. name, qcm11, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    to_print = '1'\n"
"    print(to_print + 4)"
msgstr ""

#. name, qcm11, feedback
#: SessTest_QCM/task.yaml
msgid "You cannot concatenate a string and an int."
msgstr ""

#. name, qcm11, text
#: SessTest_QCM/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    print(43//3)"
msgstr ""

#. context
#: Sort/task.yaml
msgid ""
"In computer science, a sorting algorithm is an algorithm that puts the "
"elements of a list in a certain order. The most-used orders are numerical"
" order and lexicographical order. Efficient sorting is important for "
"optimizing the use of other algorithms (such as search and merge "
"algorithms) which require input data to be in sorted lists; it is also "
"often useful for canonicalizing data and for producing human-readable "
"output. More formally, the output must satisfy two conditions:\n"
"\n"
"* The output is in nondecreasing order (each element is no smaller than "
"the previous element according to the desired total order);\n"
"* The output is a permutation (reordering but with all of the original "
"elements) of the input.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Sort/task.yaml
msgid "Session 5: List sorting"
msgstr ""

#. name, q1, header
#: Sort/task.yaml
msgid ""
".. code-block:: python\n"
"\n"
"    a_list = ... #list to sort\n"
"    sorted_list = ... #store in this variable the sorted version of the "
"list"
msgstr ""

#: Sort/src/TestSort.py:14
msgid ""
"Nice try! But using the predefined 'sort' function is a bit of cheating.\n"
"\t\tTry to implement an actual algorithm for sorting the list."
msgstr ""

#: Sort/src/TestSort.py:21
msgid "The sorted version of {} is {} and you returned {}."
msgstr ""

#: Sort/src/Templates/sort:6
msgid ""
"Nice try! But 'sorted' has been disabled for list objects.\n"
"\t\tPlease write an actual algorithm sorting the list."
msgstr ""

#. context
#: SpeedingFine/task.yaml
msgid ""
"The police is hiring you to develop a program to calculate the fine that "
"a car driver will have to pay in the event of a violation. The law "
"stipulates that the driver will have to pay 5 euros per km/h above the "
"maximum authorized speed, with a **minimum fine of 12.5€**.\n"
"\n"
"For any speeding of **more than 10 km/h** above the authorized speed, the"
" fine is **DOUBLED**!\n"
"\n"
"Your program takes as input the maximum allowed speed and the actual "
"speed of the car. It calculates the possible fine.\n"
"\n"
"*Example*:\n"
"\n"
"- If the maximum speed is 50km/h and the vehicle is traveling at 62km/h, "
"the penalty will be 12 * 5 * 2 = 120€.\n"
"\n"
"- If the maximum speed is 50km/h and the vehicle is traveling at 56km/h, "
"the penalty will be 6 * 5 = 30€.\n"
"\n"
"- If the maximum speed is 50km/h and the vehicle is traveling at 51km/h, "
"the fine will be 12.5€.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: SpeedingFine/task.yaml
msgid "Session 3: Speeding fine"
msgstr ""

#. name, q1, header
#: SpeedingFine/task.yaml
msgid "Implement the function ``fine(authorized_speed, actual_speed)`` in Python."
msgstr ""

#: SpeedingFine/src/TestFine.py:18 SpeedingFine/src/TestFine.py:27
#: SpeedingFine/src/TestFine.py:36 SpeedingFine/src/TestFine.py:45
msgid "The speed fine for a speed of {} instead of {} is {} and you returned {}."
msgstr ""

#. context
#: StudentConstructor/task.yaml
msgid ""
"In this exercise, you're asked to provide a class *Student*.\n"
"\n"
"The students are supposed to have the following characteristics:\n"
"\n"
"* A first name\n"
"\n"
"* A surname\n"
"\n"
"* A birth date\n"
"\n"
"* An email address\n"
"\n"
"* A student number (different for every student and given at the creation"
" of the object)\n"
"\n"
"The object, when cast as a **string** should return for example:\n"
"\n"
"Student number **0**: **Hervé** **Ducobu** born the **1st of april**, can"
" be reached at **doNotReachMeForHomeworks@gmail.com**\n"
"\n"
"To do so you're invited to use the magic methods.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: StudentConstructor/task.yaml
msgid "Session 9: Student - init"
msgstr ""

#. name, q1, header
#: StudentConstructor/task.yaml
msgid ""
"Implement the class ``Student`` in Python.\n"
"\n"
"We will create the object with:\n"
"\n"
"*stu = Student('firstname', 'surname', 'birthday', 'email')*"
msgstr ""

#: StudentConstructor/src/CorrStudent.py:19
msgid "Student number {}: {} {} born the {}, can be reached at {}"
msgstr ""

#: StudentConstructor/src/TestStudent.py:28
msgid ""
"With the following data: {}, {}, {}, {} for the student created, you "
"returned {} instead of {}"
msgstr ""

#: StudentConstructor/src/TestStudent.py:39
msgid ""
"With the following data: {}, {}, {}, {} for the {}th student created, you"
" returned {} instead of {}"
msgstr ""

#. context
#: Sum/task.yaml
msgid ""
"The method ``sum(list)`` returns the sum of the elements contained in "
"``list``.\n"
"\n"
"Example: the sum of :math:`[1, 2, 3]` is :math:`6`\n"
"\n"
"Note that your algorithm should be able to compute the sum even\n"
"when the list ``list`` contains malicious elements (not numbers).\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Sum/task.yaml
msgid "Session 4: Sum"
msgstr ""

#: Sum/src/TestSum.py:30
msgid "The sum list provided was {}. The type() method may be able to help you. "
msgstr ""

#. context
#: Translator/task.yaml
msgid ""
"Your citizen band radio tinder worked quite well and you're now able to "
"speak with a lot of interesting people. Even more interesting, a "
"wonderfull creature just contacted you and achieved to send you an image "
"through points and spaces (God bless Morse code).\n"
"\n"
"You definitely want to speak with her and other future matchs but it "
"occured to you that you didn't study foreign language well enough. "
"Fortunately you've got dictionnaries in your computer (which apparently "
"had downloaded the whole internet). You know just have to code a "
"translator!\n"
"\n"
"Note that if the word you're looking to translate isn't registered in "
"your dictionnary, you should let the word in its original language.\n"
"\n"
"*Example*:\n"
"\n"
"- \"I'm fond of Dean\" would become in french with the dictionnary "
"``fr``: \"je suis amoureux de doyen\"\n"
"\n"
"Note that we do not excpect you to provide an exact translation but a "
"word to word one. Moreover the keys are stored in lowercase in the "
"dictionnaries.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: Translator/task.yaml
msgid "Session 7: Apocalypse - Language translation"
msgstr ""

#. name, q1, header
#: Translator/task.yaml
msgid ""
"Implement the function ``translate(data, lan)`` in Python.\n"
"\n"
"With ``data`` as the string you wish to translate and dictionnaries named"
" according to ``lan`` usable to do the translations in the target "
"language."
msgstr ""

#: Translator/src/TestTranslator.py:24 Translator/src/TestTranslator.py:33
msgid "The expected translation of {} in {} is {} and you returned {}."
msgstr ""

#. context
#: WrongIterations/task.yaml
msgid ""
"Gregory made the following code to iterate over the elements of "
"``matrix``.\n"
"\n"
".. code-block:: python\n"
"\n"
"    matrix = [\n"
"        [8, 11, 4],\n"
"        [7, 12, 9],\n"
"        [0, -6, 0],\n"
"    ]\n"
"\n"
"    sum_even = 0\n"
"    for i in range(4):\n"
"        for j in range(4):\n"
"            elem = matrix[i][j]\n"
"            if elem%2 == 0:\n"
"                sum_even += matrix[i][j]\n"
"\n"
"As you can see, what he wanted was to **compute the sum of all the even "
"values in the matrix**.\n"
"However, when run, **his code crashes**.\n"
"\n"
"Find **where the mistake is** and **rewrite this code using ``while`` "
"loops and iterators** (not ``for`` loops).\n"
"\n"
"You can consider ``matrix`` is provided (you don't have to create it) and"
" that it will never contain something else than integers.\n"
"Store the sum of the even number in a variable called ``sum_even`` as in "
"the code above.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: WrongIterations/task.yaml
msgid "Session 7: Wrong iterations"
msgstr ""

#. name, q1, header
#: WrongIterations/task.yaml
msgid ""
"As a reminder, iterators typically have the following methods:\n"
"\n"
".. code-block:: python\n"
"\n"
"    class ExampleIterator:\n"
"        def __iter__():  # Returns the iterator itself\n"
"            ...\n"
"        def __next__():  # Returns the next element to iterate on\n"
"            ..."
msgstr ""

#: WrongIterations/src/TestWrongIterations.py:37
msgid ""
"Well tried! But you cannot use a `for` loop in this exercise. Use `while`"
" and iterators instead."
msgstr ""

#: WrongIterations/src/TestWrongIterations.py:48
msgid "Your code raised an exception ({}('{}')) while handling matrix {}."
msgstr ""

#: WrongIterations/src/TestWrongIterations.py:50
msgid ""
"With matrix {}, you computed an incorrect sum of even numbers {} instead "
"of {}."
msgstr ""

#. context
#: ZooGame/task.yaml
msgid ""
"Imagine you want to make a **video game** about the management of a "
"**virtual zoo**.\n"
"For this exercice, you will implement short parts of the game that "
"represent\n"
"the animals that the zoo owns, as well as the zoo.\n"
"\n"
"In other words, you are asked to **create a class** that will represent "
"**any animal**\n"
"and **several classes** that will represent **different species**.\n"
"You are asked as well to **make a class** that will represent\n"
"**the zoo itself**, containing a certain number of different animals and "
"to create your own zoo.\n"
"\n"
".. raw:: html\n"
"\n"
"   <script defer>\n"
"   $(document).ready(function(){\n"
"       setTimeout(function() {\n"
"       window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    }, 0);\n"
"\n"
"    $(window).resize(function(){\n"
"        window.parent.postMessage({height: document.body.scrollHeight}, "
"\"*\");\n"
"    });\n"
"   })\n"
"   </script>"
msgstr ""

#. name
#: ZooGame/task.yaml
msgid "Session 10: Zoo Game"
msgstr ""

#. name, q1, header
#: ZooGame/task.yaml
msgid ""
"You will first implement a class ``Animal``, which should have:\n"
"\n"
"* an attribute ``name`` which is the name the player will give the animal"
"\n"
"\n"
"* an attribute ``diurnal`` which should be ``True`` if the animal is "
"active at day time and ``False`` if it is active at night time\n"
"\n"
"* an attribute ``nb_legs`` which represents the number of legs the animal"
" has\n"
"\n"
"* an attribute ``asleep`` which will be set to ``True`` (resp. ``False``)"
" by calling the method ``sleep()`` (resp. ``wake_up()``). If the animal "
"tries to wake up while it is not asleep or to sleep while it is already "
"asleep, your program should raise a ``RuntimeError``.\n"
"\n"
"Only the **name** of the animal needs to be passed to the "
"**constructor**.\n"
"We decide to set ``asleep`` to ``False`` by default.\n"
"Obviously, as this class represents any animal, we don't know what value\n"
"the other attributes should take.\n"
"The most logical thing to do would be to set them to ``None``.\n"
"\n"
"You will then implement **three different subclasses** of ``Animal``\n"
"representing three different species: ``Lion``, ``Owl`` and ``Giraffe``.\n"
"The values of the different attributes of the parent class should now be "
"set\n"
"in their constructors.\n"
"\n"
"``Lion`` will have an additional ``roar()`` **method**, which will print "
"``ROARRR!!!``.\n"
"\n"
"``Owl`` will have a ``fly()`` **method**, which won't do anything (use "
"the statement ``pass`` to do nothing).\n"
"\n"
"``Giraffe`` will have an additional **attribute** ``neck_length`` (in "
"meters).\n"
"This information will be given to the constructor of the class.\n"
"Note that your code shouldn't accept invalid values for this attribute\n"
"(negative lengths or string values for example).\n"
"Raise a ``ValueError`` in case you get an invalid value.\n"
"\n"
"You will then implement a **last class**: ``Zoo``,\n"
"which will have a list of animals called ``animals`` as an **attribute**\n"
"and a **method** ``add_animal(animal)`` to fill this list.\n"
"Raise a ``ValueError`` if this method receives something else than an "
"animal.\n"
"\n"
"You are finally asked to **define a function** ``create_my_zoo()`` that\n"
"will return your zoo containing a lion, an owl and two giraffes.\n"
"Those are your animals, name them as you want ;)"
msgstr ""

#: ZooGame/src/TestZooGame.py:15
msgid "Does the class `Animal` exist?"
msgstr ""

#: ZooGame/src/TestZooGame.py:17 ZooGame/src/TestZooGame.py:81
msgid "You wrongly raised an exception while creating an animal: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:22
msgid "Does the class `Lion` exist?"
msgstr ""

#: ZooGame/src/TestZooGame.py:24
msgid "You wrongly raised an exception while creating a lion: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:29
msgid "Does the class `Owl` exist?"
msgstr ""

#: ZooGame/src/TestZooGame.py:31
msgid "You wrongly raised an exception while creating an owl: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:36
msgid "Does the class `Giraffe` exist?"
msgstr ""

#: ZooGame/src/TestZooGame.py:38
msgid "You wrongly raised an exception while creating a giraffe: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:41
msgid "Your class `Animal` does not have an attribute `name`."
msgstr ""

#: ZooGame/src/TestZooGame.py:42
msgid "Your class `Animal` does not have an attribute `diurnal`."
msgstr ""

#: ZooGame/src/TestZooGame.py:43
msgid "Your class `Animal` does not have an attribute `nb_legs`."
msgstr ""

#: ZooGame/src/TestZooGame.py:44
msgid "Your class `Animal` does not have an attribute `asleep`."
msgstr ""

#: ZooGame/src/TestZooGame.py:47
msgid "Your class `Zoo` does not have an attribute `animals`."
msgstr ""

#: ZooGame/src/TestZooGame.py:48
msgid "Your class `Zoo` does not have a method named `add_animal`."
msgstr ""

#: ZooGame/src/TestZooGame.py:50
msgid "Does the class `create_my_zoo()` exists?"
msgstr ""

#: ZooGame/src/TestZooGame.py:52
msgid "Does the class `Zoo` exist?"
msgstr ""

#: ZooGame/src/TestZooGame.py:54
msgid "You wrongly raised an exception while creating a zoo: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:62
msgid ""
"The name passed to the constructor of `Animal` does not get stored in the"
" attribute `name`."
msgstr ""

#: ZooGame/src/TestZooGame.py:64
msgid "The attribute `diurnal` of `Animal` is not set to `None` by default."
msgstr ""

#: ZooGame/src/TestZooGame.py:66
msgid "The attribute `nb_legs` of `Animal` is not set to `None` by default."
msgstr ""

#: ZooGame/src/TestZooGame.py:68
msgid "The attribute `asleep` of `Animal` is not set to `False` by default."
msgstr ""

#: ZooGame/src/TestZooGame.py:78
msgid ""
"The name passed to the constructor of `Animal` is not stored in the "
"attribute `name`."
msgstr ""

#: ZooGame/src/TestZooGame.py:89
msgid ""
"Calling ``sleep()`` on your animals doesn't set their attribute "
"``asleep`` to ``True``"
msgstr ""

#: ZooGame/src/TestZooGame.py:92
msgid ""
"Calling ``wake_up()`` on your animals doesn't set their attribute "
"``asleep`` to ``False``"
msgstr ""

#: ZooGame/src/TestZooGame.py:99
msgid ""
"You wrongly raised an exception while creating and using an animal: "
"{}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:108
msgid "Your class `Lion` is not a subclass of `Animal`."
msgstr ""

#: ZooGame/src/TestZooGame.py:109
msgid ""
"The name passed to the constructor of `Lion` does not get stored in the "
"attribute `name`."
msgstr ""

#: ZooGame/src/TestZooGame.py:111
msgid "Lions have 4 legs."
msgstr ""

#: ZooGame/src/TestZooGame.py:112
msgid "Lions are active during day time"
msgstr ""

#: ZooGame/src/TestZooGame.py:113
msgid "`Lion` should be awake after its creation."
msgstr ""

#: ZooGame/src/TestZooGame.py:114
msgid "Did you make a `roar()` method in your class `Lion`?"
msgstr ""

#: ZooGame/src/TestZooGame.py:116
msgid "You wrongly raised an exception while creating and using a lion: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:125
msgid "Your class `Owl` is not a subclass of `Animal`."
msgstr ""

#: ZooGame/src/TestZooGame.py:126
msgid ""
"The name passed to the constructor of `Owl` does not get stored in the "
"attribute `name`."
msgstr ""

#: ZooGame/src/TestZooGame.py:128
msgid "Owls have 2 legs."
msgstr ""

#: ZooGame/src/TestZooGame.py:129
msgid "Owls are inactive during day time"
msgstr ""

#: ZooGame/src/TestZooGame.py:130
msgid "`Owl` should be awake after its creation."
msgstr ""

#: ZooGame/src/TestZooGame.py:131
msgid "Did you put a `fly()` method in your class `Owl`?"
msgstr ""

#: ZooGame/src/TestZooGame.py:133
msgid "You wrongly raised an exception while creating and using an owl: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:144
msgid "Your class `Giraffe` is not a subclass of `Animal`."
msgstr ""

#: ZooGame/src/TestZooGame.py:145
msgid ""
"The name passed to the constructor of `Giraffe` does not get stored in "
"the attribute `name`."
msgstr ""

#: ZooGame/src/TestZooGame.py:147
msgid "Giraffes have 4 legs."
msgstr ""

#: ZooGame/src/TestZooGame.py:148
msgid "Giraffes are active during day time"
msgstr ""

#: ZooGame/src/TestZooGame.py:149
msgid "`Giraffe` should be awake after its creation."
msgstr ""

#: ZooGame/src/TestZooGame.py:150
msgid "Did you add a `neck_length` attribute to your class `Giraffe`?"
msgstr ""

#: ZooGame/src/TestZooGame.py:155
msgid ""
"You wrongly raised an exception while creating and using a lion and a "
"giraffe: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:170
msgid "Calling `add_animal(animal)` did not add an animal in the list `animals`."
msgstr ""

#: ZooGame/src/TestZooGame.py:172
msgid "Calling `add_animal(lion)` did not add a lion in the list `animals`."
msgstr ""

#: ZooGame/src/TestZooGame.py:173
msgid "Calling `add_animal(owl)` did not add an owl in the list `animals`."
msgstr ""

#: ZooGame/src/TestZooGame.py:174
msgid "Calling `add_animal(giraffe)` did not add a giraffe in the list `animals`."
msgstr ""

#: ZooGame/src/TestZooGame.py:177
msgid ""
"You wrongly raised an exception while creating a zoo and adding animals: "
"{}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:185
msgid ""
"You wrongly raised an exception while using the function "
"`create_my_zoo()`: {}('{}')"
msgstr ""

#: ZooGame/src/TestZooGame.py:187
msgid "Your zoo is missing animals (you need 1 lion, 1 owl and 2 giraffes)."
msgstr ""

